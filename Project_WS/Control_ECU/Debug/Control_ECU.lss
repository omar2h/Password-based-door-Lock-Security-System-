
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002e46  00002eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080007c  0080007c  00002ef6  2**0
                  ALLOC
  3 .stab         00003390  00000000  00000000  00002ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cf5  00000000  00000000  00006288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000080bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000822d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bb10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000befd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <main>
      8a:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect) {
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    11ec:	80 91 7c 00 	lds	r24, 0x007C
    11f0:	90 91 7d 00 	lds	r25, 0x007D
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	29 f0       	breq	.+10     	; 0x1202 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    11f8:	e0 91 7c 00 	lds	r30, 0x007C
    11fc:	f0 91 7d 00 	lds	r31, 0x007D
    1200:	09 95       	icall
	}
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_19>:

ISR(TIMER0_COMP_vect) {
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1252:	80 91 7c 00 	lds	r24, 0x007C
    1256:	90 91 7d 00 	lds	r25, 0x007D
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	29 f0       	breq	.+10     	; 0x1268 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    125e:	e0 91 7c 00 	lds	r30, 0x007C
    1262:	f0 91 7d 00 	lds	r31, 0x007D
    1266:	09 95       	icall
	}
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <TIMER_init>:

void TIMER_init(TIMER_ConfigType * config){
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <TIMER_init+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <TIMER_init+0x8>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
	switch(config->id){
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	80 81       	ld	r24, Z
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	09 f0       	breq	.+2      	; 0x12ae <TIMER_init+0x20>
    12ac:	40 c0       	rjmp	.+128    	; 0x132e <TIMER_init+0xa0>
		case TIMER0:
			switch(config->mode){
    12ae:	e9 81       	ldd	r30, Y+1	; 0x01
    12b0:	fa 81       	ldd	r31, Y+2	; 0x02
    12b2:	81 81       	ldd	r24, Z+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3c 83       	std	Y+4, r19	; 0x04
    12ba:	2b 83       	std	Y+3, r18	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <TIMER_init+0x42>
    12c4:	2b 81       	ldd	r18, Y+3	; 0x03
    12c6:	3c 81       	ldd	r19, Y+4	; 0x04
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	a1 f0       	breq	.+40     	; 0x12f6 <TIMER_init+0x68>
    12ce:	2f c0       	rjmp	.+94     	; 0x132e <TIMER_init+0xa0>
				case NORMAL:
					TCNT0 = config->initial_value;
    12d0:	a2 e5       	ldi	r26, 0x52	; 82
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	83 81       	ldd	r24, Z+3	; 0x03
    12da:	94 81       	ldd	r25, Z+4	; 0x04
    12dc:	8c 93       	st	X, r24
					TCCR0 = (1<<FOC0) | (config->clock<<CS00);
    12de:	a3 e5       	ldi	r26, 0x53	; 83
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	8c 93       	st	X, r24
					TIMSK = (1<<TOIE0);
    12ec:	e9 e5       	ldi	r30, 0x59	; 89
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 83       	st	Z, r24
    12f4:	1c c0       	rjmp	.+56     	; 0x132e <TIMER_init+0xa0>
					break;

				case CTC:
					TCNT0 = config->initial_value;
    12f6:	a2 e5       	ldi	r26, 0x52	; 82
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 81       	ldd	r30, Y+1	; 0x01
    12fc:	fa 81       	ldd	r31, Y+2	; 0x02
    12fe:	83 81       	ldd	r24, Z+3	; 0x03
    1300:	94 81       	ldd	r25, Z+4	; 0x04
    1302:	8c 93       	st	X, r24
					OCR0 = config->compare_value;
    1304:	ac e5       	ldi	r26, 0x5C	; 92
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e9 81       	ldd	r30, Y+1	; 0x01
    130a:	fa 81       	ldd	r31, Y+2	; 0x02
    130c:	85 81       	ldd	r24, Z+5	; 0x05
    130e:	96 81       	ldd	r25, Z+6	; 0x06
    1310:	8c 93       	st	X, r24
					TCCR0 = (1<<FOC0) | (1<<WGM01) | (config->clock<<CS00);
    1312:	a3 e5       	ldi	r26, 0x53	; 83
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 81       	ldd	r30, Y+1	; 0x01
    1318:	fa 81       	ldd	r31, Y+2	; 0x02
    131a:	82 81       	ldd	r24, Z+2	; 0x02
    131c:	88 68       	ori	r24, 0x88	; 136
    131e:	8c 93       	st	X, r24
					TIMSK |= (1<<OCIE0);
    1320:	a9 e5       	ldi	r26, 0x59	; 89
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e9 e5       	ldi	r30, 0x59	; 89
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	82 60       	ori	r24, 0x02	; 2
    132c:	8c 93       	st	X, r24
			}
			break;
		case TIMER1:
			break;
	}
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <TIMER_setCallBack>:

void TIMER_setCallBack(void(*a_ptr)(void)){
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	00 d0       	rcall	.+0      	; 0x1342 <TIMER_setCallBack+0x6>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9a 83       	std	Y+2, r25	; 0x02
    1348:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	90 93 7d 00 	sts	0x007D, r25
    1352:	80 93 7c 00 	sts	0x007C, r24
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <TIMER_deinit>:

void TIMER_deinit(){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    1368:	e2 e5       	ldi	r30, 0x52	; 82
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	10 82       	st	Z, r1
	OCR0  = 0;
    136e:	ec e5       	ldi	r30, 0x5C	; 92
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	10 82       	st	Z, r1
	TCCR0 = 0;
    1374:	e3 e5       	ldi	r30, 0x53	; 83
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	10 82       	st	Z, r1
	TIMSK = 0;
    137a:	e9 e5       	ldi	r30, 0x59	; 89
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	10 82       	st	Z, r1
}
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <TWI_init>:

#include "../common_macros.h"
#include <avr/io.h>

void TWI_init(Twi_ConfigType * config)
{
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <TWI_init+0x12>
    1398:	00 d0       	rcall	.+0      	; 0x139a <TWI_init+0x14>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
	switch(config->prescaler){
    13a2:	e9 81       	ldd	r30, Y+1	; 0x01
    13a4:	fa 81       	ldd	r31, Y+2	; 0x02
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3c 83       	std	Y+4, r19	; 0x04
    13ae:	2b 83       	std	Y+3, r18	; 0x03
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	29 f1       	breq	.+74     	; 0x1404 <TWI_init+0x7e>
    13ba:	eb 81       	ldd	r30, Y+3	; 0x03
    13bc:	fc 81       	ldd	r31, Y+4	; 0x04
    13be:	e2 30       	cpi	r30, 0x02	; 2
    13c0:	f1 05       	cpc	r31, r1
    13c2:	34 f4       	brge	.+12     	; 0x13d0 <TWI_init+0x4a>
    13c4:	2b 81       	ldd	r18, Y+3	; 0x03
    13c6:	3c 81       	ldd	r19, Y+4	; 0x04
    13c8:	21 15       	cp	r18, r1
    13ca:	31 05       	cpc	r19, r1
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <TWI_init+0x60>
    13ce:	46 c0       	rjmp	.+140    	; 0x145c <TWI_init+0xd6>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	91 05       	cpc	r25, r1
    13d8:	21 f1       	breq	.+72     	; 0x1422 <TWI_init+0x9c>
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	e3 30       	cpi	r30, 0x03	; 3
    13e0:	f1 05       	cpc	r31, r1
    13e2:	71 f1       	breq	.+92     	; 0x1440 <TWI_init+0xba>
    13e4:	3b c0       	rjmp	.+118    	; 0x145c <TWI_init+0xd6>
		case(PRESCALER_1):
			CLEAR_BIT(TWSR, TWPS0);
    13e6:	a1 e2       	ldi	r26, 0x21	; 33
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e1 e2       	ldi	r30, 0x21	; 33
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8e 7f       	andi	r24, 0xFE	; 254
    13f2:	8c 93       	st	X, r24
			CLEAR_BIT(TWSR, TWPS1);
    13f4:	a1 e2       	ldi	r26, 0x21	; 33
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e1 e2       	ldi	r30, 0x21	; 33
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8d 7f       	andi	r24, 0xFD	; 253
    1400:	8c 93       	st	X, r24
    1402:	2c c0       	rjmp	.+88     	; 0x145c <TWI_init+0xd6>
			break;

		case(PRESCALER_4):
			SET_BIT(TWSR, TWPS0);
    1404:	a1 e2       	ldi	r26, 0x21	; 33
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e1 e2       	ldi	r30, 0x21	; 33
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	81 60       	ori	r24, 0x01	; 1
    1410:	8c 93       	st	X, r24
			CLEAR_BIT(TWSR, TWPS1);
    1412:	a1 e2       	ldi	r26, 0x21	; 33
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e1 e2       	ldi	r30, 0x21	; 33
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8d 7f       	andi	r24, 0xFD	; 253
    141e:	8c 93       	st	X, r24
    1420:	1d c0       	rjmp	.+58     	; 0x145c <TWI_init+0xd6>
			break;

		case(PRESCALER_16):
			CLEAR_BIT(TWSR, TWPS0);
    1422:	a1 e2       	ldi	r26, 0x21	; 33
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e1 e2       	ldi	r30, 0x21	; 33
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8e 7f       	andi	r24, 0xFE	; 254
    142e:	8c 93       	st	X, r24
			SET_BIT(TWSR, TWPS1);
    1430:	a1 e2       	ldi	r26, 0x21	; 33
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e1 e2       	ldi	r30, 0x21	; 33
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	8c 93       	st	X, r24
    143e:	0e c0       	rjmp	.+28     	; 0x145c <TWI_init+0xd6>
			break;

		case(PRESCALER_64):
			SET_BIT(TWSR, TWPS0);
    1440:	a1 e2       	ldi	r26, 0x21	; 33
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e1 e2       	ldi	r30, 0x21	; 33
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	81 60       	ori	r24, 0x01	; 1
    144c:	8c 93       	st	X, r24
			SET_BIT(TWSR, TWPS1);
    144e:	a1 e2       	ldi	r26, 0x21	; 33
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e1 e2       	ldi	r30, 0x21	; 33
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	82 60       	ori	r24, 0x02	; 2
    145a:	8c 93       	st	X, r24
			break;
	}
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = TWI_TWBR_VALUE(config->bit_rate, config->prescaler);
    145c:	cc 24       	eor	r12, r12
    145e:	dd 24       	eor	r13, r13
    1460:	68 94       	set
    1462:	c5 f8       	bld	r12, 5
    1464:	e9 81       	ldd	r30, Y+1	; 0x01
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	20 81       	ld	r18, Z
    146a:	31 81       	ldd	r19, Z+1	; 0x01
    146c:	42 81       	ldd	r20, Z+2	; 0x02
    146e:	53 81       	ldd	r21, Z+3	; 0x03
    1470:	80 e4       	ldi	r24, 0x40	; 64
    1472:	92 e4       	ldi	r25, 0x42	; 66
    1474:	af e0       	ldi	r26, 0x0F	; 15
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__udivmodsi4>
    1480:	da 01       	movw	r26, r20
    1482:	c9 01       	movw	r24, r18
    1484:	0f 2e       	mov	r0, r31
    1486:	f0 ef       	ldi	r31, 0xF0	; 240
    1488:	ef 2e       	mov	r14, r31
    148a:	ff ef       	ldi	r31, 0xFF	; 255
    148c:	ff 2e       	mov	r15, r31
    148e:	ff ef       	ldi	r31, 0xFF	; 255
    1490:	0f 2f       	mov	r16, r31
    1492:	ff ef       	ldi	r31, 0xFF	; 255
    1494:	1f 2f       	mov	r17, r31
    1496:	f0 2d       	mov	r31, r0
    1498:	e8 0e       	add	r14, r24
    149a:	f9 1e       	adc	r15, r25
    149c:	0a 1f       	adc	r16, r26
    149e:	1b 1f       	adc	r17, r27
    14a0:	e9 81       	ldd	r30, Y+1	; 0x01
    14a2:	fa 81       	ldd	r31, Y+2	; 0x02
    14a4:	84 81       	ldd	r24, Z+4	; 0x04
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	9c 01       	movw	r18, r24
    14b0:	44 27       	eor	r20, r20
    14b2:	37 fd       	sbrc	r19, 7
    14b4:	40 95       	com	r20
    14b6:	54 2f       	mov	r21, r20
    14b8:	c8 01       	movw	r24, r16
    14ba:	b7 01       	movw	r22, r14
    14bc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__udivmodsi4>
    14c0:	da 01       	movw	r26, r20
    14c2:	c9 01       	movw	r24, r18
    14c4:	f6 01       	movw	r30, r12
    14c6:	80 83       	st	Z, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = config->address; // my address = 0x01 :)
    14c8:	a2 e2       	ldi	r26, 0x22	; 34
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	85 81       	ldd	r24, Z+5	; 0x05
    14d2:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    14d4:	e6 e5       	ldi	r30, 0x56	; 86
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	84 e0       	ldi	r24, 0x04	; 4
    14da:	80 83       	st	Z, r24
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	08 95       	ret

000014f6 <TWI_start>:

void TWI_start(void)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    14fe:	e6 e5       	ldi	r30, 0x56	; 86
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	84 ea       	ldi	r24, 0xA4	; 164
    1504:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1506:	e6 e5       	ldi	r30, 0x56	; 86
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	88 23       	and	r24, r24
    150e:	dc f7       	brge	.-10     	; 0x1506 <TWI_start+0x10>
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <TWI_stop>:

void TWI_stop(void)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    151e:	e6 e5       	ldi	r30, 0x56	; 86
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	84 e9       	ldi	r24, 0x94	; 148
    1524:	80 83       	st	Z, r24
}
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1538:	e3 e2       	ldi	r30, 0x23	; 35
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1540:	e6 e5       	ldi	r30, 0x56	; 86
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	84 e8       	ldi	r24, 0x84	; 132
    1546:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1548:	e6 e5       	ldi	r30, 0x56	; 86
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	88 23       	and	r24, r24
    1550:	dc f7       	brge	.-10     	; 0x1548 <TWI_writeByte+0x1c>
}
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1562:	e6 e5       	ldi	r30, 0x56	; 86
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	84 ec       	ldi	r24, 0xC4	; 196
    1568:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    156a:	e6 e5       	ldi	r30, 0x56	; 86
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	88 23       	and	r24, r24
    1572:	dc f7       	brge	.-10     	; 0x156a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1574:	e3 e2       	ldi	r30, 0x23	; 35
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1588:	e6 e5       	ldi	r30, 0x56	; 86
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	84 e8       	ldi	r24, 0x84	; 132
    158e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1590:	e6 e5       	ldi	r30, 0x56	; 86
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	88 23       	and	r24, r24
    1598:	dc f7       	brge	.-10     	; 0x1590 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    159a:	e3 e2       	ldi	r30, 0x23	; 35
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    15b0:	e1 e2       	ldi	r30, 0x21	; 33
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	88 7f       	andi	r24, 0xF8	; 248
    15b8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	2a 97       	sbiw	r28, 0x0a	; 10
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    15dc:	1a 82       	std	Y+2, r1	; 0x02
    15de:	19 82       	std	Y+1, r1	; 0x01
			/* Calculate the UBRR register value */
			ubrr_value = UBRR_CALC(Config_Ptr->baudrate);

#elif(UART_RATE == DOUBLE_SPEED)
			/* U2X = 1 for double transmission speed */
			SET_BIT(UCSRA, U2X);
    15e0:	ab e2       	ldi	r26, 0x2B	; 43
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	eb e2       	ldi	r30, 0x2B	; 43
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	82 60       	ori	r24, 0x02	; 2
    15ec:	8c 93       	st	X, r24
			/* Calculate the UBRR register value */
			ubrr_value = UBRR_CALC(Config_Ptr->baudrate);
    15ee:	eb 81       	ldd	r30, Y+3	; 0x03
    15f0:	fc 81       	ldd	r31, Y+4	; 0x04
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	a2 81       	ldd	r26, Z+2	; 0x02
    15f8:	b3 81       	ldd	r27, Z+3	; 0x03
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	aa 1f       	adc	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	aa 1f       	adc	r26, r26
    1608:	bb 1f       	adc	r27, r27
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	aa 1f       	adc	r26, r26
    1610:	bb 1f       	adc	r27, r27
    1612:	9c 01       	movw	r18, r24
    1614:	ad 01       	movw	r20, r26
    1616:	80 e4       	ldi	r24, 0x40	; 64
    1618:	92 e4       	ldi	r25, 0x42	; 66
    161a:	af e0       	ldi	r26, 0x0F	; 15
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__udivmodsi4>
    1626:	da 01       	movw	r26, r20
    1628:	c9 01       	movw	r24, r18
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
#endif

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1630:	e0 e4       	ldi	r30, 0x40	; 64
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	89 2f       	mov	r24, r25
    163a:	99 27       	eor	r25, r25
    163c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    163e:	e9 e2       	ldi	r30, 0x29	; 41
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	80 83       	st	Z, r24

	/* RXEN  = 1 Receiver Enable */
	SET_BIT(UCSRB, RXEN);
    1646:	aa e2       	ldi	r26, 0x2A	; 42
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ea e2       	ldi	r30, 0x2A	; 42
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 61       	ori	r24, 0x10	; 16
    1652:	8c 93       	st	X, r24
	/* TXEN  = 1 Transmitter Enable */
	SET_BIT(UCSRB, TXEN);
    1654:	aa e2       	ldi	r26, 0x2A	; 42
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ea e2       	ldi	r30, 0x2A	; 42
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	88 60       	ori	r24, 0x08	; 8
    1660:	8c 93       	st	X, r24

	/* URSEL   = 1 The URSEL must be one when writing the UCSRC */
	SET_BIT(UCSRC, URSEL);
    1662:	a0 e4       	ldi	r26, 0x40	; 64
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e0 e4       	ldi	r30, 0x40	; 64
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 68       	ori	r24, 0x80	; 128
    166e:	8c 93       	st	X, r24


	/*******************************
	*    configure parity bits      *
	*********************************/
	switch(Config_Ptr->parity_bit){
    1670:	eb 81       	ldd	r30, Y+3	; 0x03
    1672:	fc 81       	ldd	r31, Y+4	; 0x04
    1674:	85 81       	ldd	r24, Z+5	; 0x05
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3a 87       	std	Y+10, r19	; 0x0a
    167c:	29 87       	std	Y+9, r18	; 0x09
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	c1 f0       	breq	.+48     	; 0x16b8 <UART_init+0xf4>
    1688:	29 85       	ldd	r18, Y+9	; 0x09
    168a:	3a 85       	ldd	r19, Y+10	; 0x0a
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	11 f1       	breq	.+68     	; 0x16d6 <UART_init+0x112>
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	61 f5       	brne	.+88     	; 0x16f2 <UART_init+0x12e>
		case NO_PARITY:
			CLEAR_BIT(UCSRC, UPM0);
    169a:	a0 e4       	ldi	r26, 0x40	; 64
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e0 e4       	ldi	r30, 0x40	; 64
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 7e       	andi	r24, 0xEF	; 239
    16a6:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UPM1);
    16a8:	a0 e4       	ldi	r26, 0x40	; 64
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e0 e4       	ldi	r30, 0x40	; 64
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	8f 7d       	andi	r24, 0xDF	; 223
    16b4:	8c 93       	st	X, r24
    16b6:	1d c0       	rjmp	.+58     	; 0x16f2 <UART_init+0x12e>
			break;

		case ODD_PARITY:
			SET_BIT(UCSRC, UPM0);
    16b8:	a0 e4       	ldi	r26, 0x40	; 64
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e0 e4       	ldi	r30, 0x40	; 64
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 61       	ori	r24, 0x10	; 16
    16c4:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UPM1);
    16c6:	a0 e4       	ldi	r26, 0x40	; 64
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e0 e4       	ldi	r30, 0x40	; 64
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 7d       	andi	r24, 0xDF	; 223
    16d2:	8c 93       	st	X, r24
    16d4:	0e c0       	rjmp	.+28     	; 0x16f2 <UART_init+0x12e>
			break;

		case EVEN_PARTIY:
			SET_BIT(UCSRC, UPM0);
    16d6:	a0 e4       	ldi	r26, 0x40	; 64
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e0 e4       	ldi	r30, 0x40	; 64
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	80 61       	ori	r24, 0x10	; 16
    16e2:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UPM1);
    16e4:	a0 e4       	ldi	r26, 0x40	; 64
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e0 e4       	ldi	r30, 0x40	; 64
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 62       	ori	r24, 0x20	; 32
    16f0:	8c 93       	st	X, r24
	}

	/*********************************
    *    configure stop bits       *
    *********************************/
	switch(Config_Ptr->stop_bits){
    16f2:	eb 81       	ldd	r30, Y+3	; 0x03
    16f4:	fc 81       	ldd	r31, Y+4	; 0x04
    16f6:	86 81       	ldd	r24, Z+6	; 0x06
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	38 87       	std	Y+8, r19	; 0x08
    16fe:	2f 83       	std	Y+7, r18	; 0x07
    1700:	8f 81       	ldd	r24, Y+7	; 0x07
    1702:	98 85       	ldd	r25, Y+8	; 0x08
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	31 f0       	breq	.+12     	; 0x1714 <UART_init+0x150>
    1708:	2f 81       	ldd	r18, Y+7	; 0x07
    170a:	38 85       	ldd	r19, Y+8	; 0x08
    170c:	21 30       	cpi	r18, 0x01	; 1
    170e:	31 05       	cpc	r19, r1
    1710:	49 f0       	breq	.+18     	; 0x1724 <UART_init+0x160>
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <UART_init+0x16e>
		case ONE_STOP_BIT:
			CLEAR_BIT(UCSRC, USBS);
    1714:	a0 e4       	ldi	r26, 0x40	; 64
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e0 e4       	ldi	r30, 0x40	; 64
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	87 7f       	andi	r24, 0xF7	; 247
    1720:	8c 93       	st	X, r24
    1722:	07 c0       	rjmp	.+14     	; 0x1732 <UART_init+0x16e>
			break;

		case TWO_STOP_BIT:
			SET_BIT(UCSRC, USBS);
    1724:	a0 e4       	ldi	r26, 0x40	; 64
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e0 e4       	ldi	r30, 0x40	; 64
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	88 60       	ori	r24, 0x08	; 8
    1730:	8c 93       	st	X, r24
	}

	/********************************************
	 *    configure number of data bits in frame    *
	 ********************************************/
	switch(Config_Ptr->data_bits){
    1732:	eb 81       	ldd	r30, Y+3	; 0x03
    1734:	fc 81       	ldd	r31, Y+4	; 0x04
    1736:	84 81       	ldd	r24, Z+4	; 0x04
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3e 83       	std	Y+6, r19	; 0x06
    173e:	2d 83       	std	Y+5, r18	; 0x05
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	82 30       	cpi	r24, 0x02	; 2
    1746:	91 05       	cpc	r25, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <UART_init+0x188>
    174a:	48 c0       	rjmp	.+144    	; 0x17dc <UART_init+0x218>
    174c:	2d 81       	ldd	r18, Y+5	; 0x05
    174e:	3e 81       	ldd	r19, Y+6	; 0x06
    1750:	23 30       	cpi	r18, 0x03	; 3
    1752:	31 05       	cpc	r19, r1
    1754:	54 f4       	brge	.+20     	; 0x176a <UART_init+0x1a6>
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	99 f0       	breq	.+38     	; 0x1784 <UART_init+0x1c0>
    175e:	2d 81       	ldd	r18, Y+5	; 0x05
    1760:	3e 81       	ldd	r19, Y+6	; 0x06
    1762:	21 30       	cpi	r18, 0x01	; 1
    1764:	31 05       	cpc	r19, r1
    1766:	21 f1       	breq	.+72     	; 0x17b0 <UART_init+0x1ec>
    1768:	7a c0       	rjmp	.+244    	; 0x185e <UART_init+0x29a>
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <UART_init+0x1b2>
    1774:	49 c0       	rjmp	.+146    	; 0x1808 <UART_init+0x244>
    1776:	2d 81       	ldd	r18, Y+5	; 0x05
    1778:	3e 81       	ldd	r19, Y+6	; 0x06
    177a:	28 30       	cpi	r18, 0x08	; 8
    177c:	31 05       	cpc	r19, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <UART_init+0x1be>
    1780:	59 c0       	rjmp	.+178    	; 0x1834 <UART_init+0x270>
    1782:	6d c0       	rjmp	.+218    	; 0x185e <UART_init+0x29a>
		case DATA_5BITS:
			CLEAR_BIT(UCSRC, UCSZ0);
    1784:	a0 e4       	ldi	r26, 0x40	; 64
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e0 e4       	ldi	r30, 0x40	; 64
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8d 7f       	andi	r24, 0xFD	; 253
    1790:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    1792:	a0 e4       	ldi	r26, 0x40	; 64
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e0 e4       	ldi	r30, 0x40	; 64
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	8b 7f       	andi	r24, 0xFB	; 251
    179e:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    17a0:	a0 e4       	ldi	r26, 0x40	; 64
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e0 e4       	ldi	r30, 0x40	; 64
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8b 7f       	andi	r24, 0xFB	; 251
    17ac:	8c 93       	st	X, r24
    17ae:	57 c0       	rjmp	.+174    	; 0x185e <UART_init+0x29a>
			break;

		case DATA_6BITS:
			SET_BIT(UCSRC, UCSZ0);
    17b0:	a0 e4       	ldi	r26, 0x40	; 64
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e0 e4       	ldi	r30, 0x40	; 64
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ1);
    17be:	a0 e4       	ldi	r26, 0x40	; 64
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e0 e4       	ldi	r30, 0x40	; 64
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8b 7f       	andi	r24, 0xFB	; 251
    17ca:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    17cc:	a0 e4       	ldi	r26, 0x40	; 64
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e0 e4       	ldi	r30, 0x40	; 64
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8b 7f       	andi	r24, 0xFB	; 251
    17d8:	8c 93       	st	X, r24
    17da:	41 c0       	rjmp	.+130    	; 0x185e <UART_init+0x29a>
			break;

		case DATA_7BITS:
			CLEAR_BIT(UCSRC, UCSZ0);
    17dc:	a0 e4       	ldi	r26, 0x40	; 64
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e0 e4       	ldi	r30, 0x40	; 64
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8d 7f       	andi	r24, 0xFD	; 253
    17e8:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    17ea:	a0 e4       	ldi	r26, 0x40	; 64
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e0 e4       	ldi	r30, 0x40	; 64
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	84 60       	ori	r24, 0x04	; 4
    17f6:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    17f8:	a0 e4       	ldi	r26, 0x40	; 64
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e0 e4       	ldi	r30, 0x40	; 64
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8b 7f       	andi	r24, 0xFB	; 251
    1804:	8c 93       	st	X, r24
    1806:	2b c0       	rjmp	.+86     	; 0x185e <UART_init+0x29a>
			break;

		case DATA_8BITS:
			SET_BIT(UCSRC, UCSZ0);
    1808:	a0 e4       	ldi	r26, 0x40	; 64
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e0 e4       	ldi	r30, 0x40	; 64
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	82 60       	ori	r24, 0x02	; 2
    1814:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    1816:	a0 e4       	ldi	r26, 0x40	; 64
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e0 e4       	ldi	r30, 0x40	; 64
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRC, UCSZ2);
    1824:	a0 e4       	ldi	r26, 0x40	; 64
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e0 e4       	ldi	r30, 0x40	; 64
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8b 7f       	andi	r24, 0xFB	; 251
    1830:	8c 93       	st	X, r24
    1832:	15 c0       	rjmp	.+42     	; 0x185e <UART_init+0x29a>
			break;

		case DATA_9BITS:
			SET_BIT(UCSRC, UCSZ0);
    1834:	a0 e4       	ldi	r26, 0x40	; 64
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e0 e4       	ldi	r30, 0x40	; 64
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	82 60       	ori	r24, 0x02	; 2
    1840:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ1);
    1842:	a0 e4       	ldi	r26, 0x40	; 64
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e0 e4       	ldi	r30, 0x40	; 64
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	84 60       	ori	r24, 0x04	; 4
    184e:	8c 93       	st	X, r24
			SET_BIT(UCSRC, UCSZ2);
    1850:	a0 e4       	ldi	r26, 0x40	; 64
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e0 e4       	ldi	r30, 0x40	; 64
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	84 60       	ori	r24, 0x04	; 4
    185c:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
}
    185e:	2a 96       	adiw	r28, 0x0a	; 10
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    187c:	eb e2       	ldi	r30, 0x2B	; 43
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	80 72       	andi	r24, 0x20	; 32
    1888:	90 70       	andi	r25, 0x00	; 0
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	b9 f3       	breq	.-18     	; 0x187c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    188e:	ec e2       	ldi	r30, 0x2C	; 44
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    18a6:	eb e2       	ldi	r30, 0x2B	; 43
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	88 23       	and	r24, r24
    18ae:	dc f7       	brge	.-10     	; 0x18a6 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    18b0:	ec e2       	ldi	r30, 0x2C	; 44
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
}
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <UART_sendString+0x6>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    18cc:	19 82       	std	Y+1, r1	; 0x01
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	9b 81       	ldd	r25, Y+3	; 0x03
    18da:	fc 01       	movw	r30, r24
    18dc:	e2 0f       	add	r30, r18
    18de:	f3 1f       	adc	r31, r19
    18e0:	80 81       	ld	r24, Z
    18e2:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
		i++;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	9b 81       	ldd	r25, Y+3	; 0x03
    18f6:	fc 01       	movw	r30, r24
    18f8:	e2 0f       	add	r30, r18
    18fa:	f3 1f       	adc	r31, r19
    18fc:	80 81       	ld	r24, Z
    18fe:	88 23       	and	r24, r24
    1900:	39 f7       	brne	.-50     	; 0x18d0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <UART_receiveString+0xa>
    1918:	0f 92       	push	r0
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	9b 83       	std	Y+3, r25	; 0x03
    1920:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1922:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	9b 81       	ldd	r25, Y+3	; 0x03
    192e:	8c 01       	movw	r16, r24
    1930:	02 0f       	add	r16, r18
    1932:	13 1f       	adc	r17, r19
    1934:	0e 94 4f 0c 	call	0x189e	; 0x189e <UART_receiveByte>
    1938:	f8 01       	movw	r30, r16
    193a:	80 83       	st	Z, r24
    193c:	0f c0       	rjmp	.+30     	; 0x195c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != TEMP_END_OF_STRING)
	{
		i++;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	9b 81       	ldd	r25, Y+3	; 0x03
    194e:	8c 01       	movw	r16, r24
    1950:	02 0f       	add	r16, r18
    1952:	13 1f       	adc	r17, r19
    1954:	0e 94 4f 0c 	call	0x189e	; 0x189e <UART_receiveByte>
    1958:	f8 01       	movw	r30, r16
    195a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != TEMP_END_OF_STRING)
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	fc 01       	movw	r30, r24
    1968:	e2 0f       	add	r30, r18
    196a:	f3 1f       	adc	r31, r19
    196c:	80 81       	ld	r24, Z
    196e:	83 32       	cpi	r24, 0x23	; 35
    1970:	31 f7       	brne	.-52     	; 0x193e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	fc 01       	movw	r30, r24
    197e:	e2 0f       	add	r30, r18
    1980:	f3 1f       	adc	r31, r19
    1982:	10 82       	st	Z, r1
}
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	08 95       	ret

00001994 <DcMotor_Init>:
 * Initialize the DC Motor by:
 * 1. Setup the direction of the two motor pins as output by send the request to GPIO driver.
 * 2. Stop the motor at the beginning
 */
void DcMotor_Init(void)
{
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
	/* Setup the two motor pins as output pins */
	GPIO_setupPinDirection(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	64 e0       	ldi	r22, 0x04	; 4
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	65 e0       	ldi	r22, 0x05	; 5
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Motor is stopped at the beginning */
	GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	64 e0       	ldi	r22, 0x04	; 4
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	65 e0       	ldi	r22, 0x05	; 5
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <DcMotor_Rotate>:
 * Description :
 * 1. Rotate  or Stop the motor according to the state input variable.
 * 2. Control the motor speed 0 --> 100% from its maximum speed by sending to PWM driver.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	0f 92       	push	r0
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	89 83       	std	Y+1, r24	; 0x01
	if(state == DC_MOTOR_CW)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	59 f4       	brne	.+22     	; 0x19f2 <DcMotor_Rotate+0x28>
	{
		/* Rotates the Motor CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	64 e0       	ldi	r22, 0x04	; 4
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	65 e0       	ldi	r22, 0x05	; 5
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    19f0:	1b c0       	rjmp	.+54     	; 0x1a28 <DcMotor_Rotate+0x5e>

	}
	else if(state == DC_MOTOR_ACW)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	82 30       	cpi	r24, 0x02	; 2
    19f6:	59 f4       	brne	.+22     	; 0x1a0e <DcMotor_Rotate+0x44>
	{
		/* Rotates the Motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	64 e0       	ldi	r22, 0x04	; 4
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	65 e0       	ldi	r22, 0x05	; 5
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a0c:	0d c0       	rjmp	.+26     	; 0x1a28 <DcMotor_Rotate+0x5e>

	}
	else if(state == DC_MOTOR_STOP)
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	88 23       	and	r24, r24
    1a12:	51 f4       	brne	.+20     	; 0x1a28 <DcMotor_Rotate+0x5e>
	{
		/* Stop the Motor */
		GPIO_writePin(DC_MOTOR_PORT1_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	64 e0       	ldi	r22, 0x04	; 4
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT2_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
    1a1e:	82 e0       	ldi	r24, 0x02	; 2
    1a20:	65 e0       	ldi	r22, 0x05	; 5
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	}
	else
	{
		/* Invalid Input State - Do Nothing */
	}
}
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <EEPROM_writeByte+0x6>
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <EEPROM_writeByte+0x8>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1a42:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1a46:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1a4a:	88 30       	cpi	r24, 0x08	; 8
    1a4c:	11 f0       	breq	.+4      	; 0x1a52 <EEPROM_writeByte+0x22>
        return ERROR;
    1a4e:	1c 82       	std	Y+4, r1	; 0x04
    1a50:	28 c0       	rjmp	.+80     	; 0x1aa2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	80 70       	andi	r24, 0x00	; 0
    1a58:	97 70       	andi	r25, 0x07	; 7
    1a5a:	88 0f       	add	r24, r24
    1a5c:	89 2f       	mov	r24, r25
    1a5e:	88 1f       	adc	r24, r24
    1a60:	99 0b       	sbc	r25, r25
    1a62:	91 95       	neg	r25
    1a64:	80 6a       	ori	r24, 0xA0	; 160
    1a66:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a6a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1a6e:	88 31       	cpi	r24, 0x18	; 24
    1a70:	11 f0       	breq	.+4      	; 0x1a76 <EEPROM_writeByte+0x46>
        return ERROR; 
    1a72:	1c 82       	std	Y+4, r1	; 0x04
    1a74:	16 c0       	rjmp	.+44     	; 0x1aa2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a7c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1a80:	88 32       	cpi	r24, 0x28	; 40
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <EEPROM_writeByte+0x58>
        return ERROR;
    1a84:	1c 82       	std	Y+4, r1	; 0x04
    1a86:	0d c0       	rjmp	.+26     	; 0x1aa2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1a8e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1a92:	88 32       	cpi	r24, 0x28	; 40
    1a94:	11 f0       	breq	.+4      	; 0x1a9a <EEPROM_writeByte+0x6a>
        return ERROR;
    1a96:	1c 82       	std	Y+4, r1	; 0x04
    1a98:	04 c0       	rjmp	.+8      	; 0x1aa2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1a9a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <TWI_stop>
	
    return SUCCESS;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	8c 83       	std	Y+4, r24	; 0x04
    1aa2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <EEPROM_readByte+0x6>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <EEPROM_readByte+0x8>
    1aba:	0f 92       	push	r0
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	7c 83       	std	Y+4, r23	; 0x04
    1ac6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1ac8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1acc:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1ad0:	88 30       	cpi	r24, 0x08	; 8
    1ad2:	11 f0       	breq	.+4      	; 0x1ad8 <EEPROM_readByte+0x26>
        return ERROR;
    1ad4:	1d 82       	std	Y+5, r1	; 0x05
    1ad6:	44 c0       	rjmp	.+136    	; 0x1b60 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	80 70       	andi	r24, 0x00	; 0
    1ade:	97 70       	andi	r25, 0x07	; 7
    1ae0:	88 0f       	add	r24, r24
    1ae2:	89 2f       	mov	r24, r25
    1ae4:	88 1f       	adc	r24, r24
    1ae6:	99 0b       	sbc	r25, r25
    1ae8:	91 95       	neg	r25
    1aea:	80 6a       	ori	r24, 0xA0	; 160
    1aec:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1af0:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1af4:	88 31       	cpi	r24, 0x18	; 24
    1af6:	11 f0       	breq	.+4      	; 0x1afc <EEPROM_readByte+0x4a>
        return ERROR;
    1af8:	1d 82       	std	Y+5, r1	; 0x05
    1afa:	32 c0       	rjmp	.+100    	; 0x1b60 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b02:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1b06:	88 32       	cpi	r24, 0x28	; 40
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <EEPROM_readByte+0x5c>
        return ERROR;
    1b0a:	1d 82       	std	Y+5, r1	; 0x05
    1b0c:	29 c0       	rjmp	.+82     	; 0x1b60 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1b0e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1b12:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1b16:	80 31       	cpi	r24, 0x10	; 16
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <EEPROM_readByte+0x6c>
        return ERROR;
    1b1a:	1d 82       	std	Y+5, r1	; 0x05
    1b1c:	21 c0       	rjmp	.+66     	; 0x1b60 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	9a 81       	ldd	r25, Y+2	; 0x02
    1b22:	80 70       	andi	r24, 0x00	; 0
    1b24:	97 70       	andi	r25, 0x07	; 7
    1b26:	88 0f       	add	r24, r24
    1b28:	89 2f       	mov	r24, r25
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	99 0b       	sbc	r25, r25
    1b2e:	91 95       	neg	r25
    1b30:	81 6a       	ori	r24, 0xA1	; 161
    1b32:	0e 94 96 0a 	call	0x152c	; 0x152c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1b36:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1b3a:	80 34       	cpi	r24, 0x40	; 64
    1b3c:	11 f0       	breq	.+4      	; 0x1b42 <EEPROM_readByte+0x90>
        return ERROR;
    1b3e:	1d 82       	std	Y+5, r1	; 0x05
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1b42:	0e 94 c0 0a 	call	0x1580	; 0x1580 <TWI_readByteWithNACK>
    1b46:	eb 81       	ldd	r30, Y+3	; 0x03
    1b48:	fc 81       	ldd	r31, Y+4	; 0x04
    1b4a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1b4c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <TWI_getStatus>
    1b50:	88 35       	cpi	r24, 0x58	; 88
    1b52:	11 f0       	breq	.+4      	; 0x1b58 <EEPROM_readByte+0xa6>
        return ERROR;
    1b54:	1d 82       	std	Y+5, r1	; 0x05
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1b58:	0e 94 8b 0a 	call	0x1516	; 0x1516 <TWI_stop>

    return SUCCESS;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	64 e0       	ldi	r22, 0x04	; 4
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	65 e0       	ldi	r22, 0x05	; 5
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	66 e0       	ldi	r22, 0x06	; 6
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	6f ef       	ldi	r22, 0xFF	; 255
    1b9c:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ba0:	88 e3       	ldi	r24, 0x38	; 56
    1ba2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ba6:	8c e0       	ldi	r24, 0x0C	; 12
    1ba8:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_sendCommand>
}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	ea 97       	sbiw	r28, 0x3a	; 58
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1bce:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bd0:	83 e0       	ldi	r24, 0x03	; 3
    1bd2:	64 e0       	ldi	r22, 0x04	; 4
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	65 e0       	ldi	r22, 0x05	; 5
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a0 e8       	ldi	r26, 0x80	; 128
    1bea:	bf e3       	ldi	r27, 0x3F	; 63
    1bec:	8d ab       	std	Y+53, r24	; 0x35
    1bee:	9e ab       	std	Y+54, r25	; 0x36
    1bf0:	af ab       	std	Y+55, r26	; 0x37
    1bf2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf4:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf6:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf8:	8f a9       	ldd	r24, Y+55	; 0x37
    1bfa:	98 ad       	ldd	r25, Y+56	; 0x38
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4a e7       	ldi	r20, 0x7A	; 122
    1c02:	53 e4       	ldi	r21, 0x43	; 67
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	89 ab       	std	Y+49, r24	; 0x31
    1c0e:	9a ab       	std	Y+50, r25	; 0x32
    1c10:	ab ab       	std	Y+51, r26	; 0x33
    1c12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c14:	69 a9       	ldd	r22, Y+49	; 0x31
    1c16:	7a a9       	ldd	r23, Y+50	; 0x32
    1c18:	8b a9       	ldd	r24, Y+51	; 0x33
    1c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	98 ab       	std	Y+48, r25	; 0x30
    1c32:	8f a7       	std	Y+47, r24	; 0x2f
    1c34:	3f c0       	rjmp	.+126    	; 0x1cb4 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1c36:	69 a9       	ldd	r22, Y+49	; 0x31
    1c38:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	3f ef       	ldi	r19, 0xFF	; 255
    1c42:	4f e7       	ldi	r20, 0x7F	; 127
    1c44:	57 e4       	ldi	r21, 0x47	; 71
    1c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4a:	18 16       	cp	r1, r24
    1c4c:	4c f5       	brge	.+82     	; 0x1ca0 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c50:	7e a9       	ldd	r23, Y+54	; 0x36
    1c52:	8f a9       	ldd	r24, Y+55	; 0x37
    1c54:	98 ad       	ldd	r25, Y+56	; 0x38
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e2       	ldi	r20, 0x20	; 32
    1c5c:	51 e4       	ldi	r21, 0x41	; 65
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	98 ab       	std	Y+48, r25	; 0x30
    1c74:	8f a7       	std	Y+47, r24	; 0x2f
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <LCD_sendCommand+0xde>
    1c78:	89 e1       	ldi	r24, 0x19	; 25
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9e a7       	std	Y+46, r25	; 0x2e
    1c7e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c80:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c82:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_sendCommand+0xcc>
    1c88:	9e a7       	std	Y+46, r25	; 0x2e
    1c8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	98 ab       	std	Y+48, r25	; 0x30
    1c94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c98:	98 a9       	ldd	r25, Y+48	; 0x30
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	69 f7       	brne	.-38     	; 0x1c78 <LCD_sendCommand+0xc0>
    1c9e:	14 c0       	rjmp	.+40     	; 0x1cc8 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	98 ab       	std	Y+48, r25	; 0x30
    1cb2:	8f a7       	std	Y+47, r24	; 0x2f
    1cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb8:	9c a7       	std	Y+44, r25	; 0x2c
    1cba:	8b a7       	std	Y+43, r24	; 0x2b
    1cbc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cbe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LCD_sendCommand+0x108>
    1cc4:	9c a7       	std	Y+44, r25	; 0x2c
    1cc6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	66 e0       	ldi	r22, 0x06	; 6
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e8       	ldi	r26, 0x80	; 128
    1cd8:	bf e3       	ldi	r27, 0x3F	; 63
    1cda:	8f a3       	std	Y+39, r24	; 0x27
    1cdc:	98 a7       	std	Y+40, r25	; 0x28
    1cde:	a9 a7       	std	Y+41, r26	; 0x29
    1ce0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ce6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a e7       	ldi	r20, 0x7A	; 122
    1cf0:	53 e4       	ldi	r21, 0x43	; 67
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8b a3       	std	Y+35, r24	; 0x23
    1cfc:	9c a3       	std	Y+36, r25	; 0x24
    1cfe:	ad a3       	std	Y+37, r26	; 0x25
    1d00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d02:	6b a1       	ldd	r22, Y+35	; 0x23
    1d04:	7c a1       	ldd	r23, Y+36	; 0x24
    1d06:	8d a1       	ldd	r24, Y+37	; 0x25
    1d08:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9a a3       	std	Y+34, r25	; 0x22
    1d20:	89 a3       	std	Y+33, r24	; 0x21
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1d24:	6b a1       	ldd	r22, Y+35	; 0x23
    1d26:	7c a1       	ldd	r23, Y+36	; 0x24
    1d28:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	4c f5       	brge	.+82     	; 0x1d8e <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d40:	89 a5       	ldd	r24, Y+41	; 0x29
    1d42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9a a3       	std	Y+34, r25	; 0x22
    1d62:	89 a3       	std	Y+33, r24	; 0x21
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <LCD_sendCommand+0x1cc>
    1d66:	89 e1       	ldi	r24, 0x19	; 25
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	98 a3       	std	Y+32, r25	; 0x20
    1d6c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d70:	98 a1       	ldd	r25, Y+32	; 0x20
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_sendCommand+0x1ba>
    1d76:	98 a3       	std	Y+32, r25	; 0x20
    1d78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	89 a1       	ldd	r24, Y+33	; 0x21
    1d86:	9a a1       	ldd	r25, Y+34	; 0x22
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <LCD_sendCommand+0x1ae>
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d90:	7c a1       	ldd	r23, Y+36	; 0x24
    1d92:	8d a1       	ldd	r24, Y+37	; 0x25
    1d94:	9e a1       	ldd	r25, Y+38	; 0x26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9a a3       	std	Y+34, r25	; 0x22
    1da0:	89 a3       	std	Y+33, r24	; 0x21
    1da2:	89 a1       	ldd	r24, Y+33	; 0x21
    1da4:	9a a1       	ldd	r25, Y+34	; 0x22
    1da6:	9e 8f       	std	Y+30, r25	; 0x1e
    1da8:	8d 8f       	std	Y+29, r24	; 0x1d
    1daa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_sendCommand+0x1f6>
    1db2:	9e 8f       	std	Y+30, r25	; 0x1e
    1db4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	6a ad       	ldd	r22, Y+58	; 0x3a
    1dba:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e8       	ldi	r26, 0x80	; 128
    1dc4:	bf e3       	ldi	r27, 0x3F	; 63
    1dc6:	89 8f       	std	Y+25, r24	; 0x19
    1dc8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dca:	ab 8f       	std	Y+27, r26	; 0x1b
    1dcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a e7       	ldi	r20, 0x7A	; 122
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8d 8b       	std	Y+21, r24	; 0x15
    1de8:	9e 8b       	std	Y+22, r25	; 0x16
    1dea:	af 8b       	std	Y+23, r26	; 0x17
    1dec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dee:	6d 89       	ldd	r22, Y+21	; 0x15
    1df0:	7e 89       	ldd	r23, Y+22	; 0x16
    1df2:	8f 89       	ldd	r24, Y+23	; 0x17
    1df4:	98 8d       	ldd	r25, Y+24	; 0x18
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <LCD_sendCommand+0x258>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9c 8b       	std	Y+20, r25	; 0x14
    1e0c:	8b 8b       	std	Y+19, r24	; 0x13
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e10:	6d 89       	ldd	r22, Y+21	; 0x15
    1e12:	7e 89       	ldd	r23, Y+22	; 0x16
    1e14:	8f 89       	ldd	r24, Y+23	; 0x17
    1e16:	98 8d       	ldd	r25, Y+24	; 0x18
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9c 8b       	std	Y+20, r25	; 0x14
    1e4e:	8b 8b       	std	Y+19, r24	; 0x13
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD_sendCommand+0x2b8>
    1e52:	89 e1       	ldi	r24, 0x19	; 25
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	89 8b       	std	Y+17, r24	; 0x11
    1e5a:	89 89       	ldd	r24, Y+17	; 0x11
    1e5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_sendCommand+0x2a6>
    1e62:	9a 8b       	std	Y+18, r25	; 0x12
    1e64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8b 89       	ldd	r24, Y+19	; 0x13
    1e72:	9c 89       	ldd	r25, Y+20	; 0x14
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD_sendCommand+0x29a>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9c 8b       	std	Y+20, r25	; 0x14
    1e8c:	8b 8b       	std	Y+19, r24	; 0x13
    1e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e90:	9c 89       	ldd	r25, Y+20	; 0x14
    1e92:	98 8b       	std	Y+16, r25	; 0x10
    1e94:	8f 87       	std	Y+15, r24	; 0x0f
    1e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e98:	98 89       	ldd	r25, Y+16	; 0x10
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_sendCommand+0x2e2>
    1e9e:	98 8b       	std	Y+16, r25	; 0x10
    1ea0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	66 e0       	ldi	r22, 0x06	; 6
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e8       	ldi	r26, 0x80	; 128
    1eb2:	bf e3       	ldi	r27, 0x3F	; 63
    1eb4:	8b 87       	std	Y+11, r24	; 0x0b
    1eb6:	9c 87       	std	Y+12, r25	; 0x0c
    1eb8:	ad 87       	std	Y+13, r26	; 0x0d
    1eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a e7       	ldi	r20, 0x7A	; 122
    1eca:	53 e4       	ldi	r21, 0x43	; 67
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8f 83       	std	Y+7, r24	; 0x07
    1ed6:	98 87       	std	Y+8, r25	; 0x08
    1ed8:	a9 87       	std	Y+9, r26	; 0x09
    1eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_sendCommand+0x346>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_sendCommand+0x3a6>
    1f40:	89 e1       	ldi	r24, 0x19	; 25
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_sendCommand+0x394>
    1f50:	9c 83       	std	Y+4, r25	; 0x04
    1f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_sendCommand+0x388>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_sendCommand+0x3d0>
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f90:	ea 96       	adiw	r28, 0x3a	; 58
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	ea 97       	sbiw	r28, 0x3a	; 58
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1fb8:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	64 e0       	ldi	r22, 0x04	; 4
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	65 e0       	ldi	r22, 0x05	; 5
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	8d ab       	std	Y+53, r24	; 0x35
    1fd8:	9e ab       	std	Y+54, r25	; 0x36
    1fda:	af ab       	std	Y+55, r26	; 0x37
    1fdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a e7       	ldi	r20, 0x7A	; 122
    1fec:	53 e4       	ldi	r21, 0x43	; 67
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	89 ab       	std	Y+49, r24	; 0x31
    1ff8:	9a ab       	std	Y+50, r25	; 0x32
    1ffa:	ab ab       	std	Y+51, r26	; 0x33
    1ffc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    2000:	7a a9       	ldd	r23, Y+50	; 0x32
    2002:	8b a9       	ldd	r24, Y+51	; 0x33
    2004:	9c a9       	ldd	r25, Y+52	; 0x34
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	98 ab       	std	Y+48, r25	; 0x30
    201c:	8f a7       	std	Y+47, r24	; 0x2f
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2020:	69 a9       	ldd	r22, Y+49	; 0x31
    2022:	7a a9       	ldd	r23, Y+50	; 0x32
    2024:	8b a9       	ldd	r24, Y+51	; 0x33
    2026:	9c a9       	ldd	r25, Y+52	; 0x34
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6d a9       	ldd	r22, Y+53	; 0x35
    203a:	7e a9       	ldd	r23, Y+54	; 0x36
    203c:	8f a9       	ldd	r24, Y+55	; 0x37
    203e:	98 ad       	ldd	r25, Y+56	; 0x38
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	98 ab       	std	Y+48, r25	; 0x30
    205e:	8f a7       	std	Y+47, r24	; 0x2f
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_displayCharacter+0xde>
    2062:	89 e1       	ldi	r24, 0x19	; 25
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9e a7       	std	Y+46, r25	; 0x2e
    2068:	8d a7       	std	Y+45, r24	; 0x2d
    206a:	8d a5       	ldd	r24, Y+45	; 0x2d
    206c:	9e a5       	ldd	r25, Y+46	; 0x2e
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_displayCharacter+0xcc>
    2072:	9e a7       	std	Y+46, r25	; 0x2e
    2074:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8f a5       	ldd	r24, Y+47	; 0x2f
    2078:	98 a9       	ldd	r25, Y+48	; 0x30
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8f a5       	ldd	r24, Y+47	; 0x2f
    2082:	98 a9       	ldd	r25, Y+48	; 0x30
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_displayCharacter+0xc0>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	98 ab       	std	Y+48, r25	; 0x30
    209c:	8f a7       	std	Y+47, r24	; 0x2f
    209e:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a0:	98 a9       	ldd	r25, Y+48	; 0x30
    20a2:	9c a7       	std	Y+44, r25	; 0x2c
    20a4:	8b a7       	std	Y+43, r24	; 0x2b
    20a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_displayCharacter+0x108>
    20ae:	9c a7       	std	Y+44, r25	; 0x2c
    20b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20b2:	83 e0       	ldi	r24, 0x03	; 3
    20b4:	66 e0       	ldi	r22, 0x06	; 6
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e8       	ldi	r26, 0x80	; 128
    20c2:	bf e3       	ldi	r27, 0x3F	; 63
    20c4:	8f a3       	std	Y+39, r24	; 0x27
    20c6:	98 a7       	std	Y+40, r25	; 0x28
    20c8:	a9 a7       	std	Y+41, r26	; 0x29
    20ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6f a1       	ldd	r22, Y+39	; 0x27
    20ce:	78 a5       	ldd	r23, Y+40	; 0x28
    20d0:	89 a5       	ldd	r24, Y+41	; 0x29
    20d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	53 e4       	ldi	r21, 0x43	; 67
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8b a3       	std	Y+35, r24	; 0x23
    20e6:	9c a3       	std	Y+36, r25	; 0x24
    20e8:	ad a3       	std	Y+37, r26	; 0x25
    20ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
    210c:	3f c0       	rjmp	.+126    	; 0x218c <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    210e:	6b a1       	ldd	r22, Y+35	; 0x23
    2110:	7c a1       	ldd	r23, Y+36	; 0x24
    2112:	8d a1       	ldd	r24, Y+37	; 0x25
    2114:	9e a1       	ldd	r25, Y+38	; 0x26
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6f a1       	ldd	r22, Y+39	; 0x27
    2128:	78 a5       	ldd	r23, Y+40	; 0x28
    212a:	89 a5       	ldd	r24, Y+41	; 0x29
    212c:	9a a5       	ldd	r25, Y+42	; 0x2a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
    214e:	0f c0       	rjmp	.+30     	; 0x216e <LCD_displayCharacter+0x1cc>
    2150:	89 e1       	ldi	r24, 0x19	; 25
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	98 a3       	std	Y+32, r25	; 0x20
    2156:	8f 8f       	std	Y+31, r24	; 0x1f
    2158:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215a:	98 a1       	ldd	r25, Y+32	; 0x20
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_displayCharacter+0x1ba>
    2160:	98 a3       	std	Y+32, r25	; 0x20
    2162:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	89 a1       	ldd	r24, Y+33	; 0x21
    2166:	9a a1       	ldd	r25, Y+34	; 0x22
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	89 a1       	ldd	r24, Y+33	; 0x21
    2170:	9a a1       	ldd	r25, Y+34	; 0x22
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <LCD_displayCharacter+0x1ae>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6b a1       	ldd	r22, Y+35	; 0x23
    217a:	7c a1       	ldd	r23, Y+36	; 0x24
    217c:	8d a1       	ldd	r24, Y+37	; 0x25
    217e:	9e a1       	ldd	r25, Y+38	; 0x26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9a a3       	std	Y+34, r25	; 0x22
    218a:	89 a3       	std	Y+33, r24	; 0x21
    218c:	89 a1       	ldd	r24, Y+33	; 0x21
    218e:	9a a1       	ldd	r25, Y+34	; 0x22
    2190:	9e 8f       	std	Y+30, r25	; 0x1e
    2192:	8d 8f       	std	Y+29, r24	; 0x1d
    2194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2196:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_displayCharacter+0x1f6>
    219c:	9e 8f       	std	Y+30, r25	; 0x1e
    219e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	6a ad       	ldd	r22, Y+58	; 0x3a
    21a4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	a0 e8       	ldi	r26, 0x80	; 128
    21ae:	bf e3       	ldi	r27, 0x3F	; 63
    21b0:	89 8f       	std	Y+25, r24	; 0x19
    21b2:	9a 8f       	std	Y+26, r25	; 0x1a
    21b4:	ab 8f       	std	Y+27, r26	; 0x1b
    21b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	4a e7       	ldi	r20, 0x7A	; 122
    21c6:	53 e4       	ldi	r21, 0x43	; 67
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	8d 8b       	std	Y+21, r24	; 0x15
    21d2:	9e 8b       	std	Y+22, r25	; 0x16
    21d4:	af 8b       	std	Y+23, r26	; 0x17
    21d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d8:	6d 89       	ldd	r22, Y+21	; 0x15
    21da:	7e 89       	ldd	r23, Y+22	; 0x16
    21dc:	8f 89       	ldd	r24, Y+23	; 0x17
    21de:	98 8d       	ldd	r25, Y+24	; 0x18
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e8       	ldi	r20, 0x80	; 128
    21e6:	5f e3       	ldi	r21, 0x3F	; 63
    21e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ec:	88 23       	and	r24, r24
    21ee:	2c f4       	brge	.+10     	; 0x21fa <LCD_displayCharacter+0x258>
		__ticks = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9c 8b       	std	Y+20, r25	; 0x14
    21f6:	8b 8b       	std	Y+19, r24	; 0x13
    21f8:	3f c0       	rjmp	.+126    	; 0x2278 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    21fa:	6d 89       	ldd	r22, Y+21	; 0x15
    21fc:	7e 89       	ldd	r23, Y+22	; 0x16
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	57 e4       	ldi	r21, 0x47	; 71
    220a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	4c f5       	brge	.+82     	; 0x2264 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	69 8d       	ldd	r22, Y+25	; 0x19
    2214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e2       	ldi	r20, 0x20	; 32
    2220:	51 e4       	ldi	r21, 0x41	; 65
    2222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9c 8b       	std	Y+20, r25	; 0x14
    2238:	8b 8b       	std	Y+19, r24	; 0x13
    223a:	0f c0       	rjmp	.+30     	; 0x225a <LCD_displayCharacter+0x2b8>
    223c:	89 e1       	ldi	r24, 0x19	; 25
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9a 8b       	std	Y+18, r25	; 0x12
    2242:	89 8b       	std	Y+17, r24	; 0x11
    2244:	89 89       	ldd	r24, Y+17	; 0x11
    2246:	9a 89       	ldd	r25, Y+18	; 0x12
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LCD_displayCharacter+0x2a6>
    224c:	9a 8b       	std	Y+18, r25	; 0x12
    224e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	9c 8b       	std	Y+20, r25	; 0x14
    2258:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225a:	8b 89       	ldd	r24, Y+19	; 0x13
    225c:	9c 89       	ldd	r25, Y+20	; 0x14
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	69 f7       	brne	.-38     	; 0x223c <LCD_displayCharacter+0x29a>
    2262:	14 c0       	rjmp	.+40     	; 0x228c <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2264:	6d 89       	ldd	r22, Y+21	; 0x15
    2266:	7e 89       	ldd	r23, Y+22	; 0x16
    2268:	8f 89       	ldd	r24, Y+23	; 0x17
    226a:	98 8d       	ldd	r25, Y+24	; 0x18
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9c 8b       	std	Y+20, r25	; 0x14
    2276:	8b 8b       	std	Y+19, r24	; 0x13
    2278:	8b 89       	ldd	r24, Y+19	; 0x13
    227a:	9c 89       	ldd	r25, Y+20	; 0x14
    227c:	98 8b       	std	Y+16, r25	; 0x10
    227e:	8f 87       	std	Y+15, r24	; 0x0f
    2280:	8f 85       	ldd	r24, Y+15	; 0x0f
    2282:	98 89       	ldd	r25, Y+16	; 0x10
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <LCD_displayCharacter+0x2e2>
    2288:	98 8b       	std	Y+16, r25	; 0x10
    228a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	66 e0       	ldi	r22, 0x06	; 6
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a0 e8       	ldi	r26, 0x80	; 128
    229c:	bf e3       	ldi	r27, 0x3F	; 63
    229e:	8b 87       	std	Y+11, r24	; 0x0b
    22a0:	9c 87       	std	Y+12, r25	; 0x0c
    22a2:	ad 87       	std	Y+13, r26	; 0x0d
    22a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	4a e7       	ldi	r20, 0x7A	; 122
    22b4:	53 e4       	ldi	r21, 0x43	; 67
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	8f 83       	std	Y+7, r24	; 0x07
    22c0:	98 87       	std	Y+8, r25	; 0x08
    22c2:	a9 87       	std	Y+9, r26	; 0x09
    22c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e8       	ldi	r20, 0x80	; 128
    22d4:	5f e3       	ldi	r21, 0x3F	; 63
    22d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22da:	88 23       	and	r24, r24
    22dc:	2c f4       	brge	.+10     	; 0x22e8 <LCD_displayCharacter+0x346>
		__ticks = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	3f c0       	rjmp	.+126    	; 0x2366 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	4c f5       	brge	.+82     	; 0x2352 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2300:	6b 85       	ldd	r22, Y+11	; 0x0b
    2302:	7c 85       	ldd	r23, Y+12	; 0x0c
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	9e 85       	ldd	r25, Y+14	; 0x0e
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e2       	ldi	r20, 0x20	; 32
    230e:	51 e4       	ldi	r21, 0x41	; 65
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <LCD_displayCharacter+0x3a6>
    232a:	89 e1       	ldi	r24, 0x19	; 25
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <LCD_displayCharacter+0x394>
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2348:	8d 81       	ldd	r24, Y+5	; 0x05
    234a:	9e 81       	ldd	r25, Y+6	; 0x06
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	69 f7       	brne	.-38     	; 0x232a <LCD_displayCharacter+0x388>
    2350:	14 c0       	rjmp	.+40     	; 0x237a <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <LCD_displayCharacter+0x3d0>
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    237a:	ea 96       	adiw	r28, 0x3a	; 58
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <LCD_displayString+0x6>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	9b 83       	std	Y+3, r25	; 0x03
    239a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    239c:	19 82       	std	Y+1, r1	; 0x01
    239e:	0e c0       	rjmp	.+28     	; 0x23bc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	9b 81       	ldd	r25, Y+3	; 0x03
    23aa:	fc 01       	movw	r30, r24
    23ac:	e2 0f       	add	r30, r18
    23ae:	f3 1f       	adc	r31, r19
    23b0:	80 81       	ld	r24, Z
    23b2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_displayCharacter>
		i++;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	9b 81       	ldd	r25, Y+3	; 0x03
    23c6:	fc 01       	movw	r30, r24
    23c8:	e2 0f       	add	r30, r18
    23ca:	f3 1f       	adc	r31, r19
    23cc:	80 81       	ld	r24, Z
    23ce:	88 23       	and	r24, r24
    23d0:	39 f7       	brne	.-50     	; 0x23a0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	08 95       	ret

000023de <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <LCD_moveCursor+0x6>
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <LCD_moveCursor+0x8>
    23e6:	0f 92       	push	r0
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	8a 83       	std	Y+2, r24	; 0x02
    23ee:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	3d 83       	std	Y+5, r19	; 0x05
    23f8:	2c 83       	std	Y+4, r18	; 0x04
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	91 05       	cpc	r25, r1
    2402:	c1 f0       	breq	.+48     	; 0x2434 <LCD_moveCursor+0x56>
    2404:	2c 81       	ldd	r18, Y+4	; 0x04
    2406:	3d 81       	ldd	r19, Y+5	; 0x05
    2408:	22 30       	cpi	r18, 0x02	; 2
    240a:	31 05       	cpc	r19, r1
    240c:	2c f4       	brge	.+10     	; 0x2418 <LCD_moveCursor+0x3a>
    240e:	8c 81       	ldd	r24, Y+4	; 0x04
    2410:	9d 81       	ldd	r25, Y+5	; 0x05
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	61 f0       	breq	.+24     	; 0x242e <LCD_moveCursor+0x50>
    2416:	19 c0       	rjmp	.+50     	; 0x244a <LCD_moveCursor+0x6c>
    2418:	2c 81       	ldd	r18, Y+4	; 0x04
    241a:	3d 81       	ldd	r19, Y+5	; 0x05
    241c:	22 30       	cpi	r18, 0x02	; 2
    241e:	31 05       	cpc	r19, r1
    2420:	69 f0       	breq	.+26     	; 0x243c <LCD_moveCursor+0x5e>
    2422:	8c 81       	ldd	r24, Y+4	; 0x04
    2424:	9d 81       	ldd	r25, Y+5	; 0x05
    2426:	83 30       	cpi	r24, 0x03	; 3
    2428:	91 05       	cpc	r25, r1
    242a:	61 f0       	breq	.+24     	; 0x2444 <LCD_moveCursor+0x66>
    242c:	0e c0       	rjmp	.+28     	; 0x244a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	0b c0       	rjmp	.+22     	; 0x244a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	80 5c       	subi	r24, 0xC0	; 192
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	07 c0       	rjmp	.+14     	; 0x244a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	80 5f       	subi	r24, 0xF0	; 240
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	03 c0       	rjmp	.+6      	; 0x244a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	80 5b       	subi	r24, 0xB0	; 176
    2448:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	80 68       	ori	r24, 0x80	; 128
    244e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_sendCommand>
}
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	00 d0       	rcall	.+0      	; 0x2468 <LCD_displayStringRowColumn+0x6>
    2468:	00 d0       	rcall	.+0      	; 0x246a <LCD_displayStringRowColumn+0x8>
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	6a 83       	std	Y+2, r22	; 0x02
    2472:	5c 83       	std	Y+4, r21	; 0x04
    2474:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	6a 81       	ldd	r22, Y+2	; 0x02
    247a:	0e 94 ef 11 	call	0x23de	; 0x23de <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_displayString>
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
    249c:	62 97       	sbiw	r28, 0x12	; 18
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	de bf       	out	0x3e, r29	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	cd bf       	out	0x3d, r28	; 61
    24a8:	9a 8b       	std	Y+18, r25	; 0x12
    24aa:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24ac:	89 89       	ldd	r24, Y+17	; 0x11
    24ae:	9a 89       	ldd	r25, Y+18	; 0x12
    24b0:	9e 01       	movw	r18, r28
    24b2:	2f 5f       	subi	r18, 0xFF	; 255
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	b9 01       	movw	r22, r18
    24b8:	4a e0       	ldi	r20, 0x0A	; 10
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <itoa>
   LCD_displayString(buff); /* Display the string */
    24c0:	ce 01       	movw	r24, r28
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	0e 94 c6 11 	call	0x238c	; 0x238c <LCD_displayString>
}
    24c8:	62 96       	adiw	r28, 0x12	; 18
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_sendCommand>
}
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <Control_init>:
#include "Control.h"
uint8 g_doorPassword[5]={0};
uint8 state = Control_START;
static uint16 g_timerCount=0;

void Control_init(){
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	a3 97       	sbiw	r28, 0x23	; 35
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
	SREG  |= (1<<7);
    2502:	af e5       	ldi	r26, 0x5F	; 95
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	ef e5       	ldi	r30, 0x5F	; 95
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	80 68       	ori	r24, 0x80	; 128
    250e:	8c 93       	st	X, r24
	TIMER_ConfigType TIMER_Configurations = {TIMER0, CTC, F_CPU_256, 0, 250};
    2510:	ce 01       	movw	r24, r28
    2512:	01 96       	adiw	r24, 0x01	; 1
    2514:	9e 8b       	std	Y+22, r25	; 0x16
    2516:	8d 8b       	std	Y+21, r24	; 0x15
    2518:	e5 e7       	ldi	r30, 0x75	; 117
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	f8 8f       	std	Y+24, r31	; 0x18
    251e:	ef 8b       	std	Y+23, r30	; 0x17
    2520:	f7 e0       	ldi	r31, 0x07	; 7
    2522:	f9 8f       	std	Y+25, r31	; 0x19
    2524:	ef 89       	ldd	r30, Y+23	; 0x17
    2526:	f8 8d       	ldd	r31, Y+24	; 0x18
    2528:	00 80       	ld	r0, Z
    252a:	8f 89       	ldd	r24, Y+23	; 0x17
    252c:	98 8d       	ldd	r25, Y+24	; 0x18
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	98 8f       	std	Y+24, r25	; 0x18
    2532:	8f 8b       	std	Y+23, r24	; 0x17
    2534:	ed 89       	ldd	r30, Y+21	; 0x15
    2536:	fe 89       	ldd	r31, Y+22	; 0x16
    2538:	00 82       	st	Z, r0
    253a:	8d 89       	ldd	r24, Y+21	; 0x15
    253c:	9e 89       	ldd	r25, Y+22	; 0x16
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	9e 8b       	std	Y+22, r25	; 0x16
    2542:	8d 8b       	std	Y+21, r24	; 0x15
    2544:	99 8d       	ldd	r25, Y+25	; 0x19
    2546:	91 50       	subi	r25, 0x01	; 1
    2548:	99 8f       	std	Y+25, r25	; 0x19
    254a:	e9 8d       	ldd	r30, Y+25	; 0x19
    254c:	ee 23       	and	r30, r30
    254e:	51 f7       	brne	.-44     	; 0x2524 <Control_init+0x36>
	UART_ConfigType UART_Configurations = {BAUDRATE_9600, DATA_8BITS, NO_PARITY, ONE_STOP_BIT};
    2550:	ce 01       	movw	r24, r28
    2552:	08 96       	adiw	r24, 0x08	; 8
    2554:	9b 8f       	std	Y+27, r25	; 0x1b
    2556:	8a 8f       	std	Y+26, r24	; 0x1a
    2558:	ee e6       	ldi	r30, 0x6E	; 110
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	fd 8f       	std	Y+29, r31	; 0x1d
    255e:	ec 8f       	std	Y+28, r30	; 0x1c
    2560:	f7 e0       	ldi	r31, 0x07	; 7
    2562:	fe 8f       	std	Y+30, r31	; 0x1e
    2564:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2566:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2568:	00 80       	ld	r0, Z
    256a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    256c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	9d 8f       	std	Y+29, r25	; 0x1d
    2572:	8c 8f       	std	Y+28, r24	; 0x1c
    2574:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2576:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2578:	00 82       	st	Z, r0
    257a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    257c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	9b 8f       	std	Y+27, r25	; 0x1b
    2582:	8a 8f       	std	Y+26, r24	; 0x1a
    2584:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2586:	91 50       	subi	r25, 0x01	; 1
    2588:	9e 8f       	std	Y+30, r25	; 0x1e
    258a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    258c:	ee 23       	and	r30, r30
    258e:	51 f7       	brne	.-44     	; 0x2564 <Control_init+0x76>
	Twi_ConfigType config = {TWI_BIT_RATE, TWI_PRESCALER, TWI_SLAVE_ADDRESS};
    2590:	ce 01       	movw	r24, r28
    2592:	0f 96       	adiw	r24, 0x0f	; 15
    2594:	98 a3       	std	Y+32, r25	; 0x20
    2596:	8f 8f       	std	Y+31, r24	; 0x1f
    2598:	e8 e6       	ldi	r30, 0x68	; 104
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	fa a3       	std	Y+34, r31	; 0x22
    259e:	e9 a3       	std	Y+33, r30	; 0x21
    25a0:	f6 e0       	ldi	r31, 0x06	; 6
    25a2:	fb a3       	std	Y+35, r31	; 0x23
    25a4:	e9 a1       	ldd	r30, Y+33	; 0x21
    25a6:	fa a1       	ldd	r31, Y+34	; 0x22
    25a8:	00 80       	ld	r0, Z
    25aa:	89 a1       	ldd	r24, Y+33	; 0x21
    25ac:	9a a1       	ldd	r25, Y+34	; 0x22
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	9a a3       	std	Y+34, r25	; 0x22
    25b2:	89 a3       	std	Y+33, r24	; 0x21
    25b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    25b6:	f8 a1       	ldd	r31, Y+32	; 0x20
    25b8:	00 82       	st	Z, r0
    25ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25bc:	98 a1       	ldd	r25, Y+32	; 0x20
    25be:	01 96       	adiw	r24, 0x01	; 1
    25c0:	98 a3       	std	Y+32, r25	; 0x20
    25c2:	8f 8f       	std	Y+31, r24	; 0x1f
    25c4:	9b a1       	ldd	r25, Y+35	; 0x23
    25c6:	91 50       	subi	r25, 0x01	; 1
    25c8:	9b a3       	std	Y+35, r25	; 0x23
    25ca:	eb a1       	ldd	r30, Y+35	; 0x23
    25cc:	ee 23       	and	r30, r30
    25ce:	51 f7       	brne	.-44     	; 0x25a4 <Control_init+0xb6>

	TIMER_init(&TIMER_Configurations);
    25d0:	ce 01       	movw	r24, r28
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	0e 94 47 09 	call	0x128e	; 0x128e <TIMER_init>
	UART_init(&UART_Configurations);
    25d8:	ce 01       	movw	r24, r28
    25da:	08 96       	adiw	r24, 0x08	; 8
    25dc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <UART_init>
	TWI_init(&config);
    25e0:	ce 01       	movw	r24, r28
    25e2:	0f 96       	adiw	r24, 0x0f	; 15
    25e4:	0e 94 c3 09 	call	0x1386	; 0x1386 <TWI_init>
	TIMER_setCallBack(Control_doorTimer);
    25e8:	87 e5       	ldi	r24, 0x57	; 87
    25ea:	96 e1       	ldi	r25, 0x16	; 22
    25ec:	0e 94 9e 09 	call	0x133c	; 0x133c <TIMER_setCallBack>
	LCD_init();
    25f0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <LCD_init>
	DcMotor_Init();
    25f4:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DcMotor_Init>
	Control_start();
    25f8:	0e 94 07 13 	call	0x260e	; 0x260e <Control_start>
}
    25fc:	a3 96       	adiw	r28, 0x23	; 35
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <Control_start>:

void Control_start(){
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <Control_start+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	while(1){
		//state = UART_receiveByte();
		state = OPEN_DOOR;
    2618:	84 e0       	ldi	r24, 0x04	; 4
    261a:	80 93 83 00 	sts	0x0083, r24
		switch(state){
    261e:	80 91 83 00 	lds	r24, 0x0083
    2622:	28 2f       	mov	r18, r24
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	3a 83       	std	Y+2, r19	; 0x02
    2628:	29 83       	std	Y+1, r18	; 0x01
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	81 30       	cpi	r24, 0x01	; 1
    2630:	91 05       	cpc	r25, r1
    2632:	d9 f0       	breq	.+54     	; 0x266a <Control_start+0x5c>
    2634:	29 81       	ldd	r18, Y+1	; 0x01
    2636:	3a 81       	ldd	r19, Y+2	; 0x02
    2638:	22 30       	cpi	r18, 0x02	; 2
    263a:	31 05       	cpc	r19, r1
    263c:	2c f4       	brge	.+10     	; 0x2648 <Control_start+0x3a>
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	61 f0       	breq	.+24     	; 0x265e <Control_start+0x50>
    2646:	e8 cf       	rjmp	.-48     	; 0x2618 <Control_start+0xa>
    2648:	29 81       	ldd	r18, Y+1	; 0x01
    264a:	3a 81       	ldd	r19, Y+2	; 0x02
    264c:	22 30       	cpi	r18, 0x02	; 2
    264e:	31 05       	cpc	r19, r1
    2650:	79 f0       	breq	.+30     	; 0x2670 <Control_start+0x62>
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	84 30       	cpi	r24, 0x04	; 4
    2658:	91 05       	cpc	r25, r1
    265a:	69 f0       	breq	.+26     	; 0x2676 <Control_start+0x68>
    265c:	dd cf       	rjmp	.-70     	; 0x2618 <Control_start+0xa>
			case Control_START:
				UART_sendByte(Control_START);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
				Control_receiveNewPassword();
    2664:	0e 94 3e 13 	call	0x267c	; 0x267c <Control_receiveNewPassword>
    2668:	d7 cf       	rjmp	.-82     	; 0x2618 <Control_start+0xa>
				break;

			case GET_NEW_PASSWORD:
				Control_receiveNewPassword();
    266a:	0e 94 3e 13 	call	0x267c	; 0x267c <Control_receiveNewPassword>
    266e:	d4 cf       	rjmp	.-88     	; 0x2618 <Control_start+0xa>
				break;

			case MAIN_OPTIONS:
				Control_mainOptions();
    2670:	0e 94 11 15 	call	0x2a22	; 0x2a22 <Control_mainOptions>
    2674:	d1 cf       	rjmp	.-94     	; 0x2618 <Control_start+0xa>
				break;

			case OPEN_DOOR:
				Control_openDoor();
    2676:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <Control_openDoor>
    267a:	ff cf       	rjmp	.-2      	; 0x267a <Control_start+0x6c>

0000267c <Control_receiveNewPassword>:
				break;
		}
	}
}

void Control_receiveNewPassword(){
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <Control_receiveNewPassword+0x6>
    2682:	00 d0       	rcall	.+0      	; 0x2684 <Control_receiveNewPassword+0x8>
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	uint8 i, key, confirm_password[PASSWORD_LENGTH] = {0};
    2688:	1c 82       	std	Y+4, r1	; 0x04
    268a:	1b 82       	std	Y+3, r1	; 0x03
	for(i=0; i<PASSWORD_LENGTH; i++){
    268c:	1a 82       	std	Y+2, r1	; 0x02
    268e:	19 c0       	rjmp	.+50     	; 0x26c2 <Control_receiveNewPassword+0x46>
		key = UART_receiveByte();
    2690:	0e 94 4f 0c 	call	0x189e	; 0x189e <UART_receiveByte>
    2694:	89 83       	std	Y+1, r24	; 0x01
		g_doorPassword[i] = key;
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	fc 01       	movw	r30, r24
    269e:	e2 58       	subi	r30, 0x82	; 130
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	80 83       	st	Z, r24
		LCD_intgerToString(g_doorPassword[i]);
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	fc 01       	movw	r30, r24
    26ae:	e2 58       	subi	r30, 0x82	; 130
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	88 2f       	mov	r24, r24
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_intgerToString>
	}
}

void Control_receiveNewPassword(){
	uint8 i, key, confirm_password[PASSWORD_LENGTH] = {0};
	for(i=0; i<PASSWORD_LENGTH; i++){
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	8f 5f       	subi	r24, 0xFF	; 255
    26c0:	8a 83       	std	Y+2, r24	; 0x02
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	82 30       	cpi	r24, 0x02	; 2
    26c6:	20 f3       	brcs	.-56     	; 0x2690 <Control_receiveNewPassword+0x14>
		key = UART_receiveByte();
		g_doorPassword[i] = key;
		LCD_intgerToString(g_doorPassword[i]);
	}

	for(i=0; i<PASSWORD_LENGTH; i++){
    26c8:	1a 82       	std	Y+2, r1	; 0x02
    26ca:	1d c0       	rjmp	.+58     	; 0x2706 <Control_receiveNewPassword+0x8a>
		key = UART_receiveByte();
    26cc:	0e 94 4f 0c 	call	0x189e	; 0x189e <UART_receiveByte>
    26d0:	89 83       	std	Y+1, r24	; 0x01
		confirm_password[i] = key;
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	ce 01       	movw	r24, r28
    26da:	03 96       	adiw	r24, 0x03	; 3
    26dc:	fc 01       	movw	r30, r24
    26de:	e2 0f       	add	r30, r18
    26e0:	f3 1f       	adc	r31, r19
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	80 83       	st	Z, r24
		//UART_sendByte(g_doorPassword[i]);
		LCD_intgerToString(confirm_password[i]);
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	28 2f       	mov	r18, r24
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	ce 01       	movw	r24, r28
    26ee:	03 96       	adiw	r24, 0x03	; 3
    26f0:	fc 01       	movw	r30, r24
    26f2:	e2 0f       	add	r30, r18
    26f4:	f3 1f       	adc	r31, r19
    26f6:	80 81       	ld	r24, Z
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_intgerToString>
		key = UART_receiveByte();
		g_doorPassword[i] = key;
		LCD_intgerToString(g_doorPassword[i]);
	}

	for(i=0; i<PASSWORD_LENGTH; i++){
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	8f 5f       	subi	r24, 0xFF	; 255
    2704:	8a 83       	std	Y+2, r24	; 0x02
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	82 30       	cpi	r24, 0x02	; 2
    270a:	00 f3       	brcs	.-64     	; 0x26cc <Control_receiveNewPassword+0x50>
		key = UART_receiveByte();
		confirm_password[i] = key;
		//UART_sendByte(g_doorPassword[i]);
		LCD_intgerToString(confirm_password[i]);
	}
	LCD_intgerToString(5);
    270c:	85 e0       	ldi	r24, 0x05	; 5
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_intgerToString>
	if(Control_confirmNewPassword(g_doorPassword, confirm_password) == PASSWORDS_MATCH){
    2714:	8e e7       	ldi	r24, 0x7E	; 126
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9e 01       	movw	r18, r28
    271a:	2d 5f       	subi	r18, 0xFD	; 253
    271c:	3f 4f       	sbci	r19, 0xFF	; 255
    271e:	b9 01       	movw	r22, r18
    2720:	0e 94 ae 13 	call	0x275c	; 0x275c <Control_confirmNewPassword>
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	49 f4       	brne	.+18     	; 0x273a <Control_receiveNewPassword+0xbe>
		//LCD_intgerToString(1);
		Control_savePasswordInEEPROM();
    2728:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <Control_savePasswordInEEPROM>
		UART_sendByte(PASSWORDS_MATCH);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
		state = MAIN_OPTIONS;
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	80 93 83 00 	sts	0x0083, r24
    2738:	06 c0       	rjmp	.+12     	; 0x2746 <Control_receiveNewPassword+0xca>
	}
	else{
		UART_sendByte(PASSWORDS_DIDNT_MATCH);
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
		state= GET_NEW_PASSWORD;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 83 00 	sts	0x0083, r24
	}
	UART_sendByte(state);
    2746:	80 91 83 00 	lds	r24, 0x0083
    274a:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <Control_confirmNewPassword>:

uint8 Control_confirmNewPassword(uint8 * password1, uint8 * password2){
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <Control_confirmNewPassword+0x6>
    2762:	00 d0       	rcall	.+0      	; 0x2764 <Control_confirmNewPassword+0x8>
    2764:	00 d0       	rcall	.+0      	; 0x2766 <Control_confirmNewPassword+0xa>
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	9b 83       	std	Y+3, r25	; 0x03
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	7d 83       	std	Y+5, r23	; 0x05
    2770:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0; i<PASSWORD_LENGTH; i++){
    2772:	19 82       	std	Y+1, r1	; 0x01
    2774:	19 c0       	rjmp	.+50     	; 0x27a8 <Control_confirmNewPassword+0x4c>
		if(password1[i] != password2[i]){
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	28 2f       	mov	r18, r24
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	9b 81       	ldd	r25, Y+3	; 0x03
    2780:	fc 01       	movw	r30, r24
    2782:	e2 0f       	add	r30, r18
    2784:	f3 1f       	adc	r31, r19
    2786:	40 81       	ld	r20, Z
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	8c 81       	ldd	r24, Y+4	; 0x04
    2790:	9d 81       	ldd	r25, Y+5	; 0x05
    2792:	fc 01       	movw	r30, r24
    2794:	e2 0f       	add	r30, r18
    2796:	f3 1f       	adc	r31, r19
    2798:	80 81       	ld	r24, Z
    279a:	48 17       	cp	r20, r24
    279c:	11 f0       	breq	.+4      	; 0x27a2 <Control_confirmNewPassword+0x46>
			return PASSWORDS_DIDNT_MATCH;
    279e:	1e 82       	std	Y+6, r1	; 0x06
    27a0:	08 c0       	rjmp	.+16     	; 0x27b2 <Control_confirmNewPassword+0x56>
	UART_sendByte(state);
}

uint8 Control_confirmNewPassword(uint8 * password1, uint8 * password2){
	uint8 i;
	for(i=0; i<PASSWORD_LENGTH; i++){
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	20 f3       	brcs	.-56     	; 0x2776 <Control_confirmNewPassword+0x1a>
		if(password1[i] != password2[i]){
			return PASSWORDS_DIDNT_MATCH;
		}
	}
	return PASSWORDS_MATCH;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	8e 83       	std	Y+6, r24	; 0x06
    27b2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    27b4:	26 96       	adiw	r28, 0x06	; 6
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <Control_savePasswordInEEPROM>:

void Control_savePasswordInEEPROM(){
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	6e 97       	sbiw	r28, 0x1e	; 30
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
	uint8 i, val;
	for(i = 0; i<PASSWORD_LENGTH; i++){
    27da:	1d 8e       	std	Y+29, r1	; 0x1d
    27dc:	86 c0       	rjmp	.+268    	; 0x28ea <Control_savePasswordInEEPROM+0x124>
		EEPROM_writeByte(0x0311 + i, g_doorPassword[i]);
    27de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e0:	88 2f       	mov	r24, r24
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	8f 5e       	subi	r24, 0xEF	; 239
    27e6:	9c 4f       	sbci	r25, 0xFC	; 252
    27e8:	ac 01       	movw	r20, r24
    27ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	fc 01       	movw	r30, r24
    27f2:	e2 58       	subi	r30, 0x82	; 130
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	20 81       	ld	r18, Z
    27f8:	ca 01       	movw	r24, r20
    27fa:	62 2f       	mov	r22, r18
    27fc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <EEPROM_writeByte>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	a0 e2       	ldi	r26, 0x20	; 32
    2806:	b1 e4       	ldi	r27, 0x41	; 65
    2808:	89 8f       	std	Y+25, r24	; 0x19
    280a:	9a 8f       	std	Y+26, r25	; 0x1a
    280c:	ab 8f       	std	Y+27, r26	; 0x1b
    280e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	69 8d       	ldd	r22, Y+25	; 0x19
    2812:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2814:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2816:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a e7       	ldi	r20, 0x7A	; 122
    281e:	53 e4       	ldi	r21, 0x43	; 67
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8d 8b       	std	Y+21, r24	; 0x15
    282a:	9e 8b       	std	Y+22, r25	; 0x16
    282c:	af 8b       	std	Y+23, r26	; 0x17
    282e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2830:	6d 89       	ldd	r22, Y+21	; 0x15
    2832:	7e 89       	ldd	r23, Y+22	; 0x16
    2834:	8f 89       	ldd	r24, Y+23	; 0x17
    2836:	98 8d       	ldd	r25, Y+24	; 0x18
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <Control_savePasswordInEEPROM+0x8c>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <Control_savePasswordInEEPROM+0x10a>
	else if (__tmp > 65535)
    2852:	6d 89       	ldd	r22, Y+21	; 0x15
    2854:	7e 89       	ldd	r23, Y+22	; 0x16
    2856:	8f 89       	ldd	r24, Y+23	; 0x17
    2858:	98 8d       	ldd	r25, Y+24	; 0x18
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <Control_savePasswordInEEPROM+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	69 8d       	ldd	r22, Y+25	; 0x19
    286c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <Control_savePasswordInEEPROM+0xec>
    2894:	89 e1       	ldi	r24, 0x19	; 25
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9a 8b       	std	Y+18, r25	; 0x12
    289a:	89 8b       	std	Y+17, r24	; 0x11
    289c:	89 89       	ldd	r24, Y+17	; 0x11
    289e:	9a 89       	ldd	r25, Y+18	; 0x12
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <Control_savePasswordInEEPROM+0xda>
    28a4:	9a 8b       	std	Y+18, r25	; 0x12
    28a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	8b 89       	ldd	r24, Y+19	; 0x13
    28aa:	9c 89       	ldd	r25, Y+20	; 0x14
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <Control_savePasswordInEEPROM+0xce>
    28ba:	14 c0       	rjmp	.+40     	; 0x28e4 <Control_savePasswordInEEPROM+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9c 8b       	std	Y+20, r25	; 0x14
    28ce:	8b 8b       	std	Y+19, r24	; 0x13
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	98 8b       	std	Y+16, r25	; 0x10
    28d6:	8f 87       	std	Y+15, r24	; 0x0f
    28d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28da:	98 89       	ldd	r25, Y+16	; 0x10
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <Control_savePasswordInEEPROM+0x116>
    28e0:	98 8b       	std	Y+16, r25	; 0x10
    28e2:	8f 87       	std	Y+15, r24	; 0x0f
	return PASSWORDS_MATCH;
}

void Control_savePasswordInEEPROM(){
	uint8 i, val;
	for(i = 0; i<PASSWORD_LENGTH; i++){
    28e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e6:	8f 5f       	subi	r24, 0xFF	; 255
    28e8:	8d 8f       	std	Y+29, r24	; 0x1d
    28ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ec:	82 30       	cpi	r24, 0x02	; 2
    28ee:	08 f4       	brcc	.+2      	; 0x28f2 <Control_savePasswordInEEPROM+0x12c>
    28f0:	76 cf       	rjmp	.-276    	; 0x27de <Control_savePasswordInEEPROM+0x18>
		EEPROM_writeByte(0x0311 + i, g_doorPassword[i]);
		_delay_ms(10);
	}
	for(i = 0; i<PASSWORD_LENGTH; i++){
    28f2:	1d 8e       	std	Y+29, r1	; 0x1d
    28f4:	85 c0       	rjmp	.+266    	; 0x2a00 <Control_savePasswordInEEPROM+0x23a>
		EEPROM_readByte(0x0311 + i, &val);
    28f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28f8:	88 2f       	mov	r24, r24
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	8f 5e       	subi	r24, 0xEF	; 239
    28fe:	9c 4f       	sbci	r25, 0xFC	; 252
    2900:	9e 01       	movw	r18, r28
    2902:	22 5e       	subi	r18, 0xE2	; 226
    2904:	3f 4f       	sbci	r19, 0xFF	; 255
    2906:	b9 01       	movw	r22, r18
    2908:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <EEPROM_readByte>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e2       	ldi	r26, 0x20	; 32
    2912:	b1 e4       	ldi	r27, 0x41	; 65
    2914:	8b 87       	std	Y+11, r24	; 0x0b
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	ad 87       	std	Y+13, r26	; 0x0d
    291a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a e7       	ldi	r20, 0x7A	; 122
    292a:	53 e4       	ldi	r21, 0x43	; 67
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	a9 87       	std	Y+9, r26	; 0x09
    293a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <Control_savePasswordInEEPROM+0x198>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <Control_savePasswordInEEPROM+0x216>
	else if (__tmp > 65535)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <Control_savePasswordInEEPROM+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	0f c0       	rjmp	.+30     	; 0x29be <Control_savePasswordInEEPROM+0x1f8>
    29a0:	89 e1       	ldi	r24, 0x19	; 25
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <Control_savePasswordInEEPROM+0x1e6>
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <Control_savePasswordInEEPROM+0x1da>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <Control_savePasswordInEEPROM+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <Control_savePasswordInEEPROM+0x222>
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		LCD_intgerToString(val);
    29f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29f2:	88 2f       	mov	r24, r24
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_intgerToString>
	uint8 i, val;
	for(i = 0; i<PASSWORD_LENGTH; i++){
		EEPROM_writeByte(0x0311 + i, g_doorPassword[i]);
		_delay_ms(10);
	}
	for(i = 0; i<PASSWORD_LENGTH; i++){
    29fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2a00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	08 f4       	brcc	.+2      	; 0x2a08 <Control_savePasswordInEEPROM+0x242>
    2a06:	77 cf       	rjmp	.-274    	; 0x28f6 <Control_savePasswordInEEPROM+0x130>
		EEPROM_readByte(0x0311 + i, &val);
		_delay_ms(10);
		LCD_intgerToString(val);
	}
	LCD_intgerToString(5);
    2a08:	85 e0       	ldi	r24, 0x05	; 5
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_intgerToString>
}
    2a10:	6e 96       	adiw	r28, 0x1e	; 30
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <Control_mainOptions>:

void Control_mainOptions(){
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
	uint8 option;
	option = UART_receiveByte();
    2a2c:	0e 94 4f 0c 	call	0x189e	; 0x189e <UART_receiveByte>
    2a30:	89 83       	std	Y+1, r24	; 0x01
	Control_receiveLoginPassword(option);
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	0e 94 20 15 	call	0x2a40	; 0x2a40 <Control_receiveLoginPassword>
}
    2a38:	0f 90       	pop	r0
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <Control_receiveLoginPassword>:


void Control_receiveLoginPassword(const uint8 option){
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <Control_receiveLoginPassword+0x6>
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <Control_receiveLoginPassword+0x8>
    2a48:	00 d0       	rcall	.+0      	; 0x2a4a <Control_receiveLoginPassword+0xa>
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	8e 83       	std	Y+6, r24	; 0x06
	uint8 i, key, trials=0, loginPassword[PASSWORD_LENGTH] = {0};
    2a50:	19 82       	std	Y+1, r1	; 0x01
    2a52:	1d 82       	std	Y+5, r1	; 0x05
    2a54:	1c 82       	std	Y+4, r1	; 0x04
	UART_sendByte(LOGIN);
    2a56:	83 e0       	ldi	r24, 0x03	; 3
    2a58:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
    2a5c:	3c c0       	rjmp	.+120    	; 0x2ad6 <Control_receiveLoginPassword+0x96>
	while(trials<MAX_TRIALS){
		for(i=0; i<PASSWORD_LENGTH; i++){
    2a5e:	1b 82       	std	Y+3, r1	; 0x03
    2a60:	1d c0       	rjmp	.+58     	; 0x2a9c <Control_receiveLoginPassword+0x5c>
			key = UART_receiveByte();
    2a62:	0e 94 4f 0c 	call	0x189e	; 0x189e <UART_receiveByte>
    2a66:	8a 83       	std	Y+2, r24	; 0x02
			loginPassword[i] = key;
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	ce 01       	movw	r24, r28
    2a70:	04 96       	adiw	r24, 0x04	; 4
    2a72:	fc 01       	movw	r30, r24
    2a74:	e2 0f       	add	r30, r18
    2a76:	f3 1f       	adc	r31, r19
    2a78:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7a:	80 83       	st	Z, r24
			LCD_intgerToString(loginPassword[i]);
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	ce 01       	movw	r24, r28
    2a84:	04 96       	adiw	r24, 0x04	; 4
    2a86:	fc 01       	movw	r30, r24
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	80 81       	ld	r24, Z
    2a8e:	88 2f       	mov	r24, r24
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_intgerToString>

void Control_receiveLoginPassword(const uint8 option){
	uint8 i, key, trials=0, loginPassword[PASSWORD_LENGTH] = {0};
	UART_sendByte(LOGIN);
	while(trials<MAX_TRIALS){
		for(i=0; i<PASSWORD_LENGTH; i++){
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
    2a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	00 f3       	brcs	.-64     	; 0x2a62 <Control_receiveLoginPassword+0x22>
			key = UART_receiveByte();
			loginPassword[i] = key;
			LCD_intgerToString(loginPassword[i]);
		}

		if(Control_verifyPassword(loginPassword) == PASSWORDS_MATCH){
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	04 96       	adiw	r24, 0x04	; 4
    2aa6:	0e 94 7d 15 	call	0x2afa	; 0x2afa <Control_verifyPassword>
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	59 f4       	brne	.+22     	; 0x2ac4 <Control_receiveLoginPassword+0x84>
			UART_sendByte(PASSWORDS_MATCH);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
			state = option;
    2ab4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab6:	80 93 83 00 	sts	0x0083, r24
			UART_sendByte(state);
    2aba:	80 91 83 00 	lds	r24, 0x0083
    2abe:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
    2ac2:	12 c0       	rjmp	.+36     	; 0x2ae8 <Control_receiveLoginPassword+0xa8>
			return;
		}
		else{
			UART_sendByte(PASSWORDS_DIDNT_MATCH);
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>
			trials++;
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	8f 5f       	subi	r24, 0xFF	; 255
    2ace:	89 83       	std	Y+1, r24	; 0x01
			UART_sendByte(LOGIN);
    2ad0:	83 e0       	ldi	r24, 0x03	; 3
    2ad2:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>


void Control_receiveLoginPassword(const uint8 option){
	uint8 i, key, trials=0, loginPassword[PASSWORD_LENGTH] = {0};
	UART_sendByte(LOGIN);
	while(trials<MAX_TRIALS){
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	83 30       	cpi	r24, 0x03	; 3
    2ada:	08 f2       	brcs	.-126    	; 0x2a5e <Control_receiveLoginPassword+0x1e>
			UART_sendByte(PASSWORDS_DIDNT_MATCH);
			trials++;
			UART_sendByte(LOGIN);
		}
	}
	state = ALARM;
    2adc:	87 e0       	ldi	r24, 0x07	; 7
    2ade:	80 93 83 00 	sts	0x0083, r24
	UART_sendByte(ALARM);
    2ae2:	87 e0       	ldi	r24, 0x07	; 7
    2ae4:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_sendByte>

}
    2ae8:	26 96       	adiw	r28, 0x06	; 6
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <Control_verifyPassword>:

uint8 Control_verifyPassword(uint8 * loginPassword){
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	64 97       	sbiw	r28, 0x14	; 20
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	9b 8b       	std	Y+19, r25	; 0x13
    2b10:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 i, saved_password[PASSWORD_LENGTH] = {0};
    2b12:	19 8a       	std	Y+17, r1	; 0x11
    2b14:	18 8a       	std	Y+16, r1	; 0x10
	for(i = 0; i<PASSWORD_LENGTH; i++){
    2b16:	1f 86       	std	Y+15, r1	; 0x0f
    2b18:	9d c0       	rjmp	.+314    	; 0x2c54 <Control_verifyPassword+0x15a>
		EEPROM_readByte(0x0311 + i, &saved_password[i]);
    2b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	8f 5e       	subi	r24, 0xEF	; 239
    2b22:	9c 4f       	sbci	r25, 0xFC	; 252
    2b24:	ac 01       	movw	r20, r24
    2b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b28:	88 2f       	mov	r24, r24
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9e 01       	movw	r18, r28
    2b2e:	20 5f       	subi	r18, 0xF0	; 240
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	28 0f       	add	r18, r24
    2b34:	39 1f       	adc	r19, r25
    2b36:	ca 01       	movw	r24, r20
    2b38:	b9 01       	movw	r22, r18
    2b3a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <EEPROM_readByte>
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	a0 e2       	ldi	r26, 0x20	; 32
    2b44:	b1 e4       	ldi	r27, 0x41	; 65
    2b46:	8b 87       	std	Y+11, r24	; 0x0b
    2b48:	9c 87       	std	Y+12, r25	; 0x0c
    2b4a:	ad 87       	std	Y+13, r26	; 0x0d
    2b4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	4a e7       	ldi	r20, 0x7A	; 122
    2b5c:	53 e4       	ldi	r21, 0x43	; 67
    2b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	8f 83       	std	Y+7, r24	; 0x07
    2b68:	98 87       	std	Y+8, r25	; 0x08
    2b6a:	a9 87       	std	Y+9, r26	; 0x09
    2b6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b70:	78 85       	ldd	r23, Y+8	; 0x08
    2b72:	89 85       	ldd	r24, Y+9	; 0x09
    2b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e8       	ldi	r20, 0x80	; 128
    2b7c:	5f e3       	ldi	r21, 0x3F	; 63
    2b7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b82:	88 23       	and	r24, r24
    2b84:	2c f4       	brge	.+10     	; 0x2b90 <Control_verifyPassword+0x96>
		__ticks = 1;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	3f c0       	rjmp	.+126    	; 0x2c0e <Control_verifyPassword+0x114>
	else if (__tmp > 65535)
    2b90:	6f 81       	ldd	r22, Y+7	; 0x07
    2b92:	78 85       	ldd	r23, Y+8	; 0x08
    2b94:	89 85       	ldd	r24, Y+9	; 0x09
    2b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	3f ef       	ldi	r19, 0xFF	; 255
    2b9c:	4f e7       	ldi	r20, 0x7F	; 127
    2b9e:	57 e4       	ldi	r21, 0x47	; 71
    2ba0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba4:	18 16       	cp	r1, r24
    2ba6:	4c f5       	brge	.+82     	; 0x2bfa <Control_verifyPassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e2       	ldi	r20, 0x20	; 32
    2bb6:	51 e4       	ldi	r21, 0x41	; 65
    2bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	bc 01       	movw	r22, r24
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9e 83       	std	Y+6, r25	; 0x06
    2bce:	8d 83       	std	Y+5, r24	; 0x05
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <Control_verifyPassword+0xf6>
    2bd2:	89 e1       	ldi	r24, 0x19	; 25
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	9c 83       	std	Y+4, r25	; 0x04
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <Control_verifyPassword+0xe4>
    2be2:	9c 83       	std	Y+4, r25	; 0x04
    2be4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be6:	8d 81       	ldd	r24, Y+5	; 0x05
    2be8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	69 f7       	brne	.-38     	; 0x2bd2 <Control_verifyPassword+0xd8>
    2bf8:	14 c0       	rjmp	.+40     	; 0x2c22 <Control_verifyPassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfc:	78 85       	ldd	r23, Y+8	; 0x08
    2bfe:	89 85       	ldd	r24, Y+9	; 0x09
    2c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9e 83       	std	Y+6, r25	; 0x06
    2c0c:	8d 83       	std	Y+5, r24	; 0x05
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <Control_verifyPassword+0x120>
    2c1e:	9a 83       	std	Y+2, r25	; 0x02
    2c20:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if(loginPassword[i] != saved_password[i])
    2c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c24:	28 2f       	mov	r18, r24
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	8a 89       	ldd	r24, Y+18	; 0x12
    2c2a:	9b 89       	ldd	r25, Y+19	; 0x13
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	e2 0f       	add	r30, r18
    2c30:	f3 1f       	adc	r31, r19
    2c32:	40 81       	ld	r20, Z
    2c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	40 96       	adiw	r24, 0x10	; 16
    2c3e:	fc 01       	movw	r30, r24
    2c40:	e2 0f       	add	r30, r18
    2c42:	f3 1f       	adc	r31, r19
    2c44:	80 81       	ld	r24, Z
    2c46:	48 17       	cp	r20, r24
    2c48:	11 f0       	breq	.+4      	; 0x2c4e <Control_verifyPassword+0x154>
			return PASSWORDS_DIDNT_MATCH;
    2c4a:	1c 8a       	std	Y+20, r1	; 0x14
    2c4c:	09 c0       	rjmp	.+18     	; 0x2c60 <Control_verifyPassword+0x166>

}

uint8 Control_verifyPassword(uint8 * loginPassword){
	uint8 i, saved_password[PASSWORD_LENGTH] = {0};
	for(i = 0; i<PASSWORD_LENGTH; i++){
    2c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c50:	8f 5f       	subi	r24, 0xFF	; 255
    2c52:	8f 87       	std	Y+15, r24	; 0x0f
    2c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c56:	82 30       	cpi	r24, 0x02	; 2
    2c58:	08 f4       	brcc	.+2      	; 0x2c5c <Control_verifyPassword+0x162>
    2c5a:	5f cf       	rjmp	.-322    	; 0x2b1a <Control_verifyPassword+0x20>
		EEPROM_readByte(0x0311 + i, &saved_password[i]);
		_delay_ms(10);
		if(loginPassword[i] != saved_password[i])
			return PASSWORDS_DIDNT_MATCH;
		}
	return PASSWORDS_MATCH;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	8c 8b       	std	Y+20, r24	; 0x14
    2c60:	8c 89       	ldd	r24, Y+20	; 0x14
}
    2c62:	64 96       	adiw	r28, 0x14	; 20
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <Control_openDoor>:

void Control_openDoor(){
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
	g_timerCount= 0;
    2c7c:	10 92 85 00 	sts	0x0085, r1
    2c80:	10 92 84 00 	sts	0x0084, r1
	LCD_intgerToString(55);
    2c84:	87 e3       	ldi	r24, 0x37	; 55
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 4a 12 	call	0x2494	; 0x2494 <LCD_intgerToString>
	DcMotor_Rotate(DC_MOTOR_CW);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <DcMotor_Rotate>
	while(1){
		if(g_timerCount == 440){
    2c92:	80 91 84 00 	lds	r24, 0x0084
    2c96:	90 91 85 00 	lds	r25, 0x0085
    2c9a:	21 e0       	ldi	r18, 0x01	; 1
    2c9c:	88 3b       	cpi	r24, 0xB8	; 184
    2c9e:	92 07       	cpc	r25, r18
    2ca0:	c1 f7       	brne	.-16     	; 0x2c92 <Control_openDoor+0x1e>
			TIMER_deinit();
    2ca2:	0e 94 b0 09 	call	0x1360	; 0x1360 <TIMER_deinit>
			DcMotor_Rotate(DC_MOTOR_STOP);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <DcMotor_Rotate>
    2cac:	f2 cf       	rjmp	.-28     	; 0x2c92 <Control_openDoor+0x1e>

00002cae <Control_doorTimer>:
		}

	}
}

void Control_doorTimer(){
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
	g_timerCount++;
    2cb6:	80 91 84 00 	lds	r24, 0x0084
    2cba:	90 91 85 00 	lds	r25, 0x0085
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	90 93 85 00 	sts	0x0085, r25
    2cc4:	80 93 84 00 	sts	0x0084, r24
	if(g_timerCount == 123)
    2cc8:	80 91 84 00 	lds	r24, 0x0084
    2ccc:	90 91 85 00 	lds	r25, 0x0085
    2cd0:	8b 37       	cpi	r24, 0x7B	; 123
    2cd2:	91 05       	cpc	r25, r1
    2cd4:	21 f4       	brne	.+8      	; 0x2cde <Control_doorTimer+0x30>
		DcMotor_Rotate(DC_MOTOR_STOP);
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <DcMotor_Rotate>
    2cdc:	0a c0       	rjmp	.+20     	; 0x2cf2 <Control_doorTimer+0x44>
	else if(g_timerCount == 246)
    2cde:	80 91 84 00 	lds	r24, 0x0084
    2ce2:	90 91 85 00 	lds	r25, 0x0085
    2ce6:	86 3f       	cpi	r24, 0xF6	; 246
    2ce8:	91 05       	cpc	r25, r1
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <Control_doorTimer+0x44>
		DcMotor_Rotate(DC_MOTOR_ACW);
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <DcMotor_Rotate>
}
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <main>:
 *  Created on: Nov 1, 2021
 *      Author: omarh
 */
#define F_CPU 8000000
#include "APP/Control.h"
int main(){
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
	Control_init();
    2d00:	0e 94 77 12 	call	0x24ee	; 0x24ee <Control_init>
    2d04:	ff cf       	rjmp	.-2      	; 0x2d04 <main+0xc>

00002d06 <__udivmodsi4>:
    2d06:	a1 e2       	ldi	r26, 0x21	; 33
    2d08:	1a 2e       	mov	r1, r26
    2d0a:	aa 1b       	sub	r26, r26
    2d0c:	bb 1b       	sub	r27, r27
    2d0e:	fd 01       	movw	r30, r26
    2d10:	0d c0       	rjmp	.+26     	; 0x2d2c <__udivmodsi4_ep>

00002d12 <__udivmodsi4_loop>:
    2d12:	aa 1f       	adc	r26, r26
    2d14:	bb 1f       	adc	r27, r27
    2d16:	ee 1f       	adc	r30, r30
    2d18:	ff 1f       	adc	r31, r31
    2d1a:	a2 17       	cp	r26, r18
    2d1c:	b3 07       	cpc	r27, r19
    2d1e:	e4 07       	cpc	r30, r20
    2d20:	f5 07       	cpc	r31, r21
    2d22:	20 f0       	brcs	.+8      	; 0x2d2c <__udivmodsi4_ep>
    2d24:	a2 1b       	sub	r26, r18
    2d26:	b3 0b       	sbc	r27, r19
    2d28:	e4 0b       	sbc	r30, r20
    2d2a:	f5 0b       	sbc	r31, r21

00002d2c <__udivmodsi4_ep>:
    2d2c:	66 1f       	adc	r22, r22
    2d2e:	77 1f       	adc	r23, r23
    2d30:	88 1f       	adc	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	1a 94       	dec	r1
    2d36:	69 f7       	brne	.-38     	; 0x2d12 <__udivmodsi4_loop>
    2d38:	60 95       	com	r22
    2d3a:	70 95       	com	r23
    2d3c:	80 95       	com	r24
    2d3e:	90 95       	com	r25
    2d40:	9b 01       	movw	r18, r22
    2d42:	ac 01       	movw	r20, r24
    2d44:	bd 01       	movw	r22, r26
    2d46:	cf 01       	movw	r24, r30
    2d48:	08 95       	ret

00002d4a <__prologue_saves__>:
    2d4a:	2f 92       	push	r2
    2d4c:	3f 92       	push	r3
    2d4e:	4f 92       	push	r4
    2d50:	5f 92       	push	r5
    2d52:	6f 92       	push	r6
    2d54:	7f 92       	push	r7
    2d56:	8f 92       	push	r8
    2d58:	9f 92       	push	r9
    2d5a:	af 92       	push	r10
    2d5c:	bf 92       	push	r11
    2d5e:	cf 92       	push	r12
    2d60:	df 92       	push	r13
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	ca 1b       	sub	r28, r26
    2d74:	db 0b       	sbc	r29, r27
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	09 94       	ijmp

00002d82 <__epilogue_restores__>:
    2d82:	2a 88       	ldd	r2, Y+18	; 0x12
    2d84:	39 88       	ldd	r3, Y+17	; 0x11
    2d86:	48 88       	ldd	r4, Y+16	; 0x10
    2d88:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d90:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d92:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d94:	b9 84       	ldd	r11, Y+9	; 0x09
    2d96:	c8 84       	ldd	r12, Y+8	; 0x08
    2d98:	df 80       	ldd	r13, Y+7	; 0x07
    2d9a:	ee 80       	ldd	r14, Y+6	; 0x06
    2d9c:	fd 80       	ldd	r15, Y+5	; 0x05
    2d9e:	0c 81       	ldd	r16, Y+4	; 0x04
    2da0:	1b 81       	ldd	r17, Y+3	; 0x03
    2da2:	aa 81       	ldd	r26, Y+2	; 0x02
    2da4:	b9 81       	ldd	r27, Y+1	; 0x01
    2da6:	ce 0f       	add	r28, r30
    2da8:	d1 1d       	adc	r29, r1
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	ed 01       	movw	r28, r26
    2db6:	08 95       	ret

00002db8 <itoa>:
    2db8:	fb 01       	movw	r30, r22
    2dba:	9f 01       	movw	r18, r30
    2dbc:	e8 94       	clt
    2dbe:	42 30       	cpi	r20, 0x02	; 2
    2dc0:	c4 f0       	brlt	.+48     	; 0x2df2 <itoa+0x3a>
    2dc2:	45 32       	cpi	r20, 0x25	; 37
    2dc4:	b4 f4       	brge	.+44     	; 0x2df2 <itoa+0x3a>
    2dc6:	4a 30       	cpi	r20, 0x0A	; 10
    2dc8:	29 f4       	brne	.+10     	; 0x2dd4 <itoa+0x1c>
    2dca:	97 fb       	bst	r25, 7
    2dcc:	1e f4       	brtc	.+6      	; 0x2dd4 <itoa+0x1c>
    2dce:	90 95       	com	r25
    2dd0:	81 95       	neg	r24
    2dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd4:	64 2f       	mov	r22, r20
    2dd6:	77 27       	eor	r23, r23
    2dd8:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <__udivmodhi4>
    2ddc:	80 5d       	subi	r24, 0xD0	; 208
    2dde:	8a 33       	cpi	r24, 0x3A	; 58
    2de0:	0c f0       	brlt	.+2      	; 0x2de4 <itoa+0x2c>
    2de2:	89 5d       	subi	r24, 0xD9	; 217
    2de4:	81 93       	st	Z+, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	a1 f7       	brne	.-24     	; 0x2dd4 <itoa+0x1c>
    2dec:	16 f4       	brtc	.+4      	; 0x2df2 <itoa+0x3a>
    2dee:	5d e2       	ldi	r21, 0x2D	; 45
    2df0:	51 93       	st	Z+, r21
    2df2:	10 82       	st	Z, r1
    2df4:	c9 01       	movw	r24, r18
    2df6:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <strrev>

00002dfa <strrev>:
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	67 2f       	mov	r22, r23
    2e00:	71 91       	ld	r23, Z+
    2e02:	77 23       	and	r23, r23
    2e04:	e1 f7       	brne	.-8      	; 0x2dfe <strrev+0x4>
    2e06:	32 97       	sbiw	r30, 0x02	; 2
    2e08:	04 c0       	rjmp	.+8      	; 0x2e12 <strrev+0x18>
    2e0a:	7c 91       	ld	r23, X
    2e0c:	6d 93       	st	X+, r22
    2e0e:	70 83       	st	Z, r23
    2e10:	62 91       	ld	r22, -Z
    2e12:	ae 17       	cp	r26, r30
    2e14:	bf 07       	cpc	r27, r31
    2e16:	c8 f3       	brcs	.-14     	; 0x2e0a <strrev+0x10>
    2e18:	08 95       	ret

00002e1a <__udivmodhi4>:
    2e1a:	aa 1b       	sub	r26, r26
    2e1c:	bb 1b       	sub	r27, r27
    2e1e:	51 e1       	ldi	r21, 0x11	; 17
    2e20:	07 c0       	rjmp	.+14     	; 0x2e30 <__udivmodhi4_ep>

00002e22 <__udivmodhi4_loop>:
    2e22:	aa 1f       	adc	r26, r26
    2e24:	bb 1f       	adc	r27, r27
    2e26:	a6 17       	cp	r26, r22
    2e28:	b7 07       	cpc	r27, r23
    2e2a:	10 f0       	brcs	.+4      	; 0x2e30 <__udivmodhi4_ep>
    2e2c:	a6 1b       	sub	r26, r22
    2e2e:	b7 0b       	sbc	r27, r23

00002e30 <__udivmodhi4_ep>:
    2e30:	88 1f       	adc	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	5a 95       	dec	r21
    2e36:	a9 f7       	brne	.-22     	; 0x2e22 <__udivmodhi4_loop>
    2e38:	80 95       	com	r24
    2e3a:	90 95       	com	r25
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	08 95       	ret

00002e42 <_exit>:
    2e42:	f8 94       	cli

00002e44 <__stop_program>:
    2e44:	ff cf       	rjmp	.-2      	; 0x2e44 <__stop_program>
